/* automatically generated by rust-bindgen 0.60.0 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &[u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 0;
pub const _STAT_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_LINUX: u32 = 0;
pub const _STAT_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__fsid_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RawFile {
    _unused: [u8; 0],
}
pub type ORRawFileRef = *mut _RawFile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RawData {
    _unused: [u8; 0],
}
pub type ORRawDataRef = *mut _RawData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BitmapData {
    _unused: [u8; 0],
}
pub type ORBitmapDataRef = *mut _BitmapData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Thumbnail {
    _unused: [u8; 0],
}
pub type ORThumbnailRef = *mut _Thumbnail;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IfdDir {
    _unused: [u8; 0],
}
pub type ORIfdDirRef = *mut _IfdDir;
#[doc = "< no error"]
pub const or_error_OR_ERROR_NONE: or_error = 0;
#[doc = "< Buffer is too small."]
pub const or_error_OR_ERROR_BUF_TOO_SMALL: or_error = 1;
#[doc = "< The object is not ref"]
pub const or_error_OR_ERROR_NOTAREF: or_error = 2;
#[doc = "< Can't open file. Check OS error codes"]
pub const or_error_OR_ERROR_CANT_OPEN: or_error = 3;
#[doc = "< Stream closed"]
pub const or_error_OR_ERROR_CLOSED_STREAM: or_error = 4;
#[doc = "< Requested \"object\" not found"]
pub const or_error_OR_ERROR_NOT_FOUND: or_error = 5;
#[doc = "< Invalid parameter"]
pub const or_error_OR_ERROR_INVALID_PARAM: or_error = 6;
#[doc = "< Invalid format"]
pub const or_error_OR_ERROR_INVALID_FORMAT: or_error = 7;
#[doc = "< Decompression error"]
pub const or_error_OR_ERROR_DECOMPRESSION: or_error = 8;
#[doc = "< Function is not implemented"]
pub const or_error_OR_ERROR_NOT_IMPLEMENTED: or_error = 9;
#[doc = "< Stream already open"]
pub const or_error_OR_ERROR_ALREADY_OPEN: or_error = 10;
#[doc = "< Unknown error."]
pub const or_error_OR_ERROR_UNKNOWN: or_error = 42;
pub const or_error_OR_ERROR_LAST_: or_error = 43;
#[doc = " @brief Error codes returned by libopenraw."]
pub type or_error = ::std::os::raw::c_uint;
#[doc = "< no type. Invalid value."]
pub const or_rawfile_type_OR_RAWFILE_TYPE_UNKNOWN: or_rawfile_type = 0;
#[doc = "< Canon CR2"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_CR2: or_rawfile_type = 1;
#[doc = "< Canon CRW"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_CRW: or_rawfile_type = 2;
#[doc = "< Nikon NEF"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_NEF: or_rawfile_type = 3;
#[doc = "< Minolta MRW"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_MRW: or_rawfile_type = 4;
#[doc = "< Sony ARW"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_ARW: or_rawfile_type = 5;
#[doc = "< Adobe DNG"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_DNG: or_rawfile_type = 6;
#[doc = "< Olympus ORF"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_ORF: or_rawfile_type = 7;
#[doc = "< Pentax PEF"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_PEF: or_rawfile_type = 8;
#[doc = "< Epson ERF"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_ERF: or_rawfile_type = 9;
#[doc = "< Generic TIFF"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_TIFF: or_rawfile_type = 10;
#[doc = "< Nikon NRW"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_NRW: or_rawfile_type = 11;
#[doc = "< Panasonic RAW, RW2 and RWL"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_RW2: or_rawfile_type = 12;
#[doc = "< FujiFilm RAF"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_RAF: or_rawfile_type = 13;
#[doc = "< Canon CR3"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_CR3: or_rawfile_type = 14;
#[doc = "< GoPro GPR (DNG-variation)"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_GPR: or_rawfile_type = 15;
#[doc = "< Sony SR2"]
pub const or_rawfile_type_OR_RAWFILE_TYPE_SR2: or_rawfile_type = 16;
#[doc = " @brief Types of RAW files"]
pub type or_rawfile_type = ::std::os::raw::c_uint;
pub const or_data_type_OR_DATA_TYPE_NONE: or_data_type = 0;
#[doc = "< 8bit per channel RGB pixmap"]
pub const or_data_type_OR_DATA_TYPE_PIXMAP_8RGB: or_data_type = 1;
#[doc = "< 16bit per channel RGB pixmap"]
pub const or_data_type_OR_DATA_TYPE_PIXMAP_16RGB: or_data_type = 2;
#[doc = "< JPEG data"]
pub const or_data_type_OR_DATA_TYPE_JPEG: or_data_type = 3;
#[doc = "< TIFF container"]
pub const or_data_type_OR_DATA_TYPE_TIFF: or_data_type = 4;
#[doc = "< PNG container"]
pub const or_data_type_OR_DATA_TYPE_PNG: or_data_type = 5;
#[doc = "< RAW container"]
pub const or_data_type_OR_DATA_TYPE_RAW: or_data_type = 6;
#[doc = "< compressed RAW container"]
pub const or_data_type_OR_DATA_TYPE_COMPRESSED_RAW: or_data_type = 7;
pub const or_data_type_OR_DATA_TYPE_UNKNOWN: or_data_type = 8;
#[doc = " @brief Data types"]
pub type or_data_type = ::std::os::raw::c_uint;
#[doc = "< Invalid value"]
pub const or_cfa_pattern_OR_CFA_PATTERN_NONE: or_cfa_pattern = 0;
#[doc = "< Non RGB 2x2 CFA"]
pub const or_cfa_pattern_OR_CFA_PATTERN_NON_RGB22: or_cfa_pattern = 1;
pub const or_cfa_pattern_OR_CFA_PATTERN_RGGB: or_cfa_pattern = 2;
pub const or_cfa_pattern_OR_CFA_PATTERN_GBRG: or_cfa_pattern = 3;
pub const or_cfa_pattern_OR_CFA_PATTERN_BGGR: or_cfa_pattern = 4;
pub const or_cfa_pattern_OR_CFA_PATTERN_GRBG: or_cfa_pattern = 5;
pub const or_cfa_pattern__OR_CFA_PATTERN_INVALID: or_cfa_pattern = 6;
#[doc = " @brief CFA pattern types"]
pub type or_cfa_pattern = ::std::os::raw::c_uint;
#[doc = "< Red"]
pub const or_cfa_pattern_colour_OR_PATTERN_COLOUR_RED: or_cfa_pattern_colour = 0;
#[doc = "< Green"]
pub const or_cfa_pattern_colour_OR_PATTERN_COLOUR_GREEN: or_cfa_pattern_colour = 1;
pub const or_cfa_pattern_colour_OR_PATTERN_COLOUR_BLUE: or_cfa_pattern_colour = 2;
#[doc = " @brief CFA colour components"]
pub type or_cfa_pattern_colour = ::std::os::raw::c_uint;
#[doc = "< No options"]
pub const or_options_OR_OPTIONS_NONE: or_options = 0;
#[doc = "< Don't decompress"]
pub const or_options_OR_OPTIONS_DONT_DECOMPRESS: or_options = 1;
#[doc = " @brief Options"]
pub type or_options = ::std::os::raw::c_uint;
#[doc = "< Unknown. This usually signify an error"]
pub const or_colour_matrix_origin_OR_COLOUR_MATRIX_UNKNOWN: or_colour_matrix_origin = 0;
#[doc = "< Colour matrix in library"]
pub const or_colour_matrix_origin_OR_COLOUR_MATRIX_BUILTIN: or_colour_matrix_origin = 1;
#[doc = "< Colour matrix provided by file"]
pub const or_colour_matrix_origin_OR_COLOUR_MATRIX_PROVIDED: or_colour_matrix_origin = 2;
#[doc = " @brief Where the colour matrix comes from."]
#[doc = " Typically DNG is provided. The others are built-in."]
pub type or_colour_matrix_origin = ::std::os::raw::c_uint;
#[doc = " @brief This is the type ID, a combination of vendor model"]
#[doc = "  It maps a specific camera. Only for the NATIVE file format."]
pub type or_rawfile_typeid = u32;
#[doc = " Generic"]
pub const or_ifd_dir_type_OR_IFD_OTHER: or_ifd_dir_type = 0;
#[doc = " Main (like in TIFF)"]
pub const or_ifd_dir_type_OR_IFD_MAIN: or_ifd_dir_type = 1;
#[doc = " Exif metadata"]
pub const or_ifd_dir_type_OR_IFD_EXIF: or_ifd_dir_type = 2;
#[doc = " MakerNote"]
pub const or_ifd_dir_type_OR_IFD_MNOTE: or_ifd_dir_type = 3;
#[doc = " RAW data"]
pub const or_ifd_dir_type_OR_IFD_RAW: or_ifd_dir_type = 4;
#[doc = " SubIFD"]
pub const or_ifd_dir_type_OR_IFD_SUBIFD: or_ifd_dir_type = 5;
#[doc = " INVALID value"]
pub const or_ifd_dir_type_OR_IFD_INVALID: or_ifd_dir_type = 10000;
#[doc = " @brief Type of IfdDir"]
pub type or_ifd_dir_type = ::std::os::raw::c_uint;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_NONE: _OR_TYPE_ID_VENDOR = 0;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_CANON: _OR_TYPE_ID_VENDOR = 1;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_NIKON: _OR_TYPE_ID_VENDOR = 2;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_LEICA: _OR_TYPE_ID_VENDOR = 3;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_PENTAX: _OR_TYPE_ID_VENDOR = 4;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_EPSON: _OR_TYPE_ID_VENDOR = 5;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_MINOLTA: _OR_TYPE_ID_VENDOR = 6;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_OLYMPUS: _OR_TYPE_ID_VENDOR = 7;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_SONY: _OR_TYPE_ID_VENDOR = 8;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_SAMSUNG: _OR_TYPE_ID_VENDOR = 9;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_RICOH: _OR_TYPE_ID_VENDOR = 10;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_PANASONIC: _OR_TYPE_ID_VENDOR = 11;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_MAMIYA: _OR_TYPE_ID_VENDOR = 12;
#[doc = "< Generic DNG files."]
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_ADOBE: _OR_TYPE_ID_VENDOR = 13;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_FUJIFILM: _OR_TYPE_ID_VENDOR = 14;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_BLACKMAGIC: _OR_TYPE_ID_VENDOR = 15;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_XIAOYI: _OR_TYPE_ID_VENDOR = 16;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_APPLE: _OR_TYPE_ID_VENDOR = 17;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_SIGMA: _OR_TYPE_ID_VENDOR = 18;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_GOPRO: _OR_TYPE_ID_VENDOR = 19;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_HASSELBLAD: _OR_TYPE_ID_VENDOR = 20;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_ZEISS: _OR_TYPE_ID_VENDOR = 21;
pub const _OR_TYPE_ID_VENDOR_OR_TYPEID_VENDOR_DJI: _OR_TYPE_ID_VENDOR = 22;
pub const _OR_TYPE_ID_VENDOR__OR_TYPEID_VENDOR_LAST: _OR_TYPE_ID_VENDOR = 23;
#[doc = " @brief The vendor ID: the high order 16-bits of the or_rawfile_typeid"]
pub type _OR_TYPE_ID_VENDOR = ::std::os::raw::c_uint;
pub const OR_TYPEID_UNKNOWN: _bindgen_ty_1 = 0;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_ADOBE_OR_TYPEID_ADOBE_UNKNOWN: _OR_TYPEID_VENDOR_ADOBE = 0;
#[doc = "< Generic DNG file."]
pub const _OR_TYPEID_VENDOR_ADOBE_OR_TYPEID_ADOBE_DNG_GENERIC: _OR_TYPEID_VENDOR_ADOBE = 1;
pub const _OR_TYPEID_VENDOR_ADOBE__OR_TYPEID_ADOBE_LAST: _OR_TYPEID_VENDOR_ADOBE = 2;
#[doc = " @brief Adobe type ID"]
pub type _OR_TYPEID_VENDOR_ADOBE = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_UNKNOWN: _OR_TYPEID_VENDOR_CANON = 0;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_20D: _OR_TYPEID_VENDOR_CANON = 1;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_30D: _OR_TYPEID_VENDOR_CANON = 2;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_40D: _OR_TYPEID_VENDOR_CANON = 3;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_350D: _OR_TYPEID_VENDOR_CANON = 4;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_XT: _OR_TYPEID_VENDOR_CANON = 4;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_DIGITAL_N: _OR_TYPEID_VENDOR_CANON = 4;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_400D: _OR_TYPEID_VENDOR_CANON = 5;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_XTI: _OR_TYPEID_VENDOR_CANON = 5;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_DIGITAL_X: _OR_TYPEID_VENDOR_CANON = 5;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_450D: _OR_TYPEID_VENDOR_CANON = 6;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_XSI: _OR_TYPEID_VENDOR_CANON = 6;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X2: _OR_TYPEID_VENDOR_CANON = 6;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_5D: _OR_TYPEID_VENDOR_CANON = 7;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1D: _OR_TYPEID_VENDOR_CANON = 8;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1DMKII: _OR_TYPEID_VENDOR_CANON = 9;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1DMKIII: _OR_TYPEID_VENDOR_CANON = 10;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1DS: _OR_TYPEID_VENDOR_CANON = 11;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1DSMKII: _OR_TYPEID_VENDOR_CANON = 12;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1DSMKIII: _OR_TYPEID_VENDOR_CANON = 13;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_300D: _OR_TYPEID_VENDOR_CANON = 14;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_DIGITAL_REBEL: _OR_TYPEID_VENDOR_CANON = 14;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_D30: _OR_TYPEID_VENDOR_CANON = 15;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_D60: _OR_TYPEID_VENDOR_CANON = 16;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_10D: _OR_TYPEID_VENDOR_CANON = 17;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_PRO1: _OR_TYPEID_VENDOR_CANON = 18;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G1: _OR_TYPEID_VENDOR_CANON = 19;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G2: _OR_TYPEID_VENDOR_CANON = 20;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G3: _OR_TYPEID_VENDOR_CANON = 21;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G5: _OR_TYPEID_VENDOR_CANON = 22;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G6: _OR_TYPEID_VENDOR_CANON = 23;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G7: _OR_TYPEID_VENDOR_CANON = 24;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G9: _OR_TYPEID_VENDOR_CANON = 25;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_A610: _OR_TYPEID_VENDOR_CANON = 26;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_20DA: _OR_TYPEID_VENDOR_CANON = 27;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_7D: _OR_TYPEID_VENDOR_CANON = 28;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G11: _OR_TYPEID_VENDOR_CANON = 29;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1DMKIV: _OR_TYPEID_VENDOR_CANON = 30;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_500D: _OR_TYPEID_VENDOR_CANON = 31;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T1I: _OR_TYPEID_VENDOR_CANON = 31;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X3: _OR_TYPEID_VENDOR_CANON = 31;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_5DMKII: _OR_TYPEID_VENDOR_CANON = 32;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_550D: _OR_TYPEID_VENDOR_CANON = 33;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T2I: _OR_TYPEID_VENDOR_CANON = 33;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X4: _OR_TYPEID_VENDOR_CANON = 33;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1000D: _OR_TYPEID_VENDOR_CANON = 34;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_XS: _OR_TYPEID_VENDOR_CANON = 34;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_F: _OR_TYPEID_VENDOR_CANON = 34;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G10: _OR_TYPEID_VENDOR_CANON = 35;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_50D: _OR_TYPEID_VENDOR_CANON = 36;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_60D: _OR_TYPEID_VENDOR_CANON = 36;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S90: _OR_TYPEID_VENDOR_CANON = 37;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G12: _OR_TYPEID_VENDOR_CANON = 38;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S95: _OR_TYPEID_VENDOR_CANON = 39;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_600D: _OR_TYPEID_VENDOR_CANON = 40;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T3I: _OR_TYPEID_VENDOR_CANON = 40;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X5: _OR_TYPEID_VENDOR_CANON = 40;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1100D: _OR_TYPEID_VENDOR_CANON = 41;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T3: _OR_TYPEID_VENDOR_CANON = 41;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X50: _OR_TYPEID_VENDOR_CANON = 41;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G1X: _OR_TYPEID_VENDOR_CANON = 42;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S100: _OR_TYPEID_VENDOR_CANON = 43;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_5DMKIII: _OR_TYPEID_VENDOR_CANON = 44;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1DX: _OR_TYPEID_VENDOR_CANON = 45;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_60Da: _OR_TYPEID_VENDOR_CANON = 46;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_650D: _OR_TYPEID_VENDOR_CANON = 47;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T4I: _OR_TYPEID_VENDOR_CANON = 47;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X6I: _OR_TYPEID_VENDOR_CANON = 47;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G15: _OR_TYPEID_VENDOR_CANON = 48;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_6D: _OR_TYPEID_VENDOR_CANON = 49;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_M: _OR_TYPEID_VENDOR_CANON = 50;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_SX50_HS: _OR_TYPEID_VENDOR_CANON = 51;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S110: _OR_TYPEID_VENDOR_CANON = 52;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_100D: _OR_TYPEID_VENDOR_CANON = 53;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_SL1: _OR_TYPEID_VENDOR_CANON = 53;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X7: _OR_TYPEID_VENDOR_CANON = 53;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_700D: _OR_TYPEID_VENDOR_CANON = 54;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T5I: _OR_TYPEID_VENDOR_CANON = 54;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X7I: _OR_TYPEID_VENDOR_CANON = 54;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G16: _OR_TYPEID_VENDOR_CANON = 55;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_70D: _OR_TYPEID_VENDOR_CANON = 56;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_7DMKII: _OR_TYPEID_VENDOR_CANON = 57;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G7X: _OR_TYPEID_VENDOR_CANON = 58;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G1XMKII: _OR_TYPEID_VENDOR_CANON = 59;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_750D: _OR_TYPEID_VENDOR_CANON = 60;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T6I: _OR_TYPEID_VENDOR_CANON = 60;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X8I: _OR_TYPEID_VENDOR_CANON = 60;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_760D: _OR_TYPEID_VENDOR_CANON = 61;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T6S: _OR_TYPEID_VENDOR_CANON = 61;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_8000D: _OR_TYPEID_VENDOR_CANON = 61;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_5DS_R: _OR_TYPEID_VENDOR_CANON = 62;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G3X: _OR_TYPEID_VENDOR_CANON = 63;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G9XMKII: _OR_TYPEID_VENDOR_CANON = 64;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_5DMKIV: _OR_TYPEID_VENDOR_CANON = 65;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_M5: _OR_TYPEID_VENDOR_CANON = 66;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G5X: _OR_TYPEID_VENDOR_CANON = 67;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G7XMKII: _OR_TYPEID_VENDOR_CANON = 68;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1300D: _OR_TYPEID_VENDOR_CANON = 69;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T6: _OR_TYPEID_VENDOR_CANON = 69;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X80: _OR_TYPEID_VENDOR_CANON = 69;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_M3: _OR_TYPEID_VENDOR_CANON = 70;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1DXMKII: _OR_TYPEID_VENDOR_CANON = 71;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_80D: _OR_TYPEID_VENDOR_CANON = 72;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1200D: _OR_TYPEID_VENDOR_CANON = 73;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T5: _OR_TYPEID_VENDOR_CANON = 73;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X70: _OR_TYPEID_VENDOR_CANON = 73;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G9X: _OR_TYPEID_VENDOR_CANON = 74;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_M10: _OR_TYPEID_VENDOR_CANON = 75;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_800D: _OR_TYPEID_VENDOR_CANON = 76;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T7I: _OR_TYPEID_VENDOR_CANON = 76;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X9I: _OR_TYPEID_VENDOR_CANON = 76;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_77D: _OR_TYPEID_VENDOR_CANON = 77;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_9000D: _OR_TYPEID_VENDOR_CANON = 77;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_M6: _OR_TYPEID_VENDOR_CANON = 78;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_M100: _OR_TYPEID_VENDOR_CANON = 79;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_6DMKII: _OR_TYPEID_VENDOR_CANON = 80;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_200D: _OR_TYPEID_VENDOR_CANON = 81;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_SL2: _OR_TYPEID_VENDOR_CANON = 81;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X9: _OR_TYPEID_VENDOR_CANON = 81;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G1XMKIII: _OR_TYPEID_VENDOR_CANON = 82;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_5DS: _OR_TYPEID_VENDOR_CANON = 83;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_M50: _OR_TYPEID_VENDOR_CANON = 84;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_M: _OR_TYPEID_VENDOR_CANON = 84;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_SX1_IS: _OR_TYPEID_VENDOR_CANON = 85;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S120: _OR_TYPEID_VENDOR_CANON = 86;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_SX60_HS: _OR_TYPEID_VENDOR_CANON = 87;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_2000D: _OR_TYPEID_VENDOR_CANON = 88;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T7: _OR_TYPEID_VENDOR_CANON = 88;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X90: _OR_TYPEID_VENDOR_CANON = 88;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_R: _OR_TYPEID_VENDOR_CANON = 89;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_3000D: _OR_TYPEID_VENDOR_CANON = 90;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_T100: _OR_TYPEID_VENDOR_CANON = 90;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_4000D: _OR_TYPEID_VENDOR_CANON = 90;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1DMKIIN: _OR_TYPEID_VENDOR_CANON = 91;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_SX70_HS: _OR_TYPEID_VENDOR_CANON = 92;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_RP: _OR_TYPEID_VENDOR_CANON = 93;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_250D: _OR_TYPEID_VENDOR_CANON = 94;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_SL3: _OR_TYPEID_VENDOR_CANON = 94;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X10: _OR_TYPEID_VENDOR_CANON = 94;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G7XMKIII: _OR_TYPEID_VENDOR_CANON = 95;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_G5XMKII: _OR_TYPEID_VENDOR_CANON = 96;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_M6MKII: _OR_TYPEID_VENDOR_CANON = 97;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_90D: _OR_TYPEID_VENDOR_CANON = 98;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_M200: _OR_TYPEID_VENDOR_CANON = 99;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_1DXMKIII: _OR_TYPEID_VENDOR_CANON = 100;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_R5: _OR_TYPEID_VENDOR_CANON = 101;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_R6: _OR_TYPEID_VENDOR_CANON = 102;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S30: _OR_TYPEID_VENDOR_CANON = 103;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S40: _OR_TYPEID_VENDOR_CANON = 104;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S45: _OR_TYPEID_VENDOR_CANON = 105;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S50: _OR_TYPEID_VENDOR_CANON = 106;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S60: _OR_TYPEID_VENDOR_CANON = 107;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S70: _OR_TYPEID_VENDOR_CANON = 108;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_S100V: _OR_TYPEID_VENDOR_CANON = 109;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_PRO70: _OR_TYPEID_VENDOR_CANON = 110;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_PRO90: _OR_TYPEID_VENDOR_CANON = 111;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_850D: _OR_TYPEID_VENDOR_CANON = 112;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_REBEL_T8I: _OR_TYPEID_VENDOR_CANON = 112;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_X10I: _OR_TYPEID_VENDOR_CANON = 112;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_M2: _OR_TYPEID_VENDOR_CANON = 113;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_M50MKII: _OR_TYPEID_VENDOR_CANON = 114;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_KISS_M2: _OR_TYPEID_VENDOR_CANON = 114;
pub const _OR_TYPEID_VENDOR_CANON_OR_TYPEID_CANON_EOS_R3: _OR_TYPEID_VENDOR_CANON = 115;
pub const _OR_TYPEID_VENDOR_CANON__OR_TYPEID_CANON_LAST: _OR_TYPEID_VENDOR_CANON = 116;
#[doc = " @brief Canon type IDs"]
pub type _OR_TYPEID_VENDOR_CANON = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_UNKNOWN: _OR_TYPEID_VENDOR_NIKON = 0;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_E5700: _OR_TYPEID_VENDOR_NIKON = 1;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D1: _OR_TYPEID_VENDOR_NIKON = 2;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D1X: _OR_TYPEID_VENDOR_NIKON = 3;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D100: _OR_TYPEID_VENDOR_NIKON = 4;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D2H: _OR_TYPEID_VENDOR_NIKON = 5;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D2X: _OR_TYPEID_VENDOR_NIKON = 6;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D200: _OR_TYPEID_VENDOR_NIKON = 7;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D3: _OR_TYPEID_VENDOR_NIKON = 8;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D300: _OR_TYPEID_VENDOR_NIKON = 9;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D40: _OR_TYPEID_VENDOR_NIKON = 10;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D40X: _OR_TYPEID_VENDOR_NIKON = 11;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D50: _OR_TYPEID_VENDOR_NIKON = 12;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D70: _OR_TYPEID_VENDOR_NIKON = 13;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D70S: _OR_TYPEID_VENDOR_NIKON = 14;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D80: _OR_TYPEID_VENDOR_NIKON = 15;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D3000: _OR_TYPEID_VENDOR_NIKON = 16;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_P6000: _OR_TYPEID_VENDOR_NIKON = 17;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_P7000: _OR_TYPEID_VENDOR_NIKON = 18;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D7000: _OR_TYPEID_VENDOR_NIKON = 19;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D3100: _OR_TYPEID_VENDOR_NIKON = 20;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_1_J1: _OR_TYPEID_VENDOR_NIKON = 21;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_1_V1: _OR_TYPEID_VENDOR_NIKON = 22;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_P7100: _OR_TYPEID_VENDOR_NIKON = 23;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D5000: _OR_TYPEID_VENDOR_NIKON = 24;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D5100: _OR_TYPEID_VENDOR_NIKON = 25;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D4: _OR_TYPEID_VENDOR_NIKON = 26;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D3S: _OR_TYPEID_VENDOR_NIKON = 27;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D3X: _OR_TYPEID_VENDOR_NIKON = 28;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D300S: _OR_TYPEID_VENDOR_NIKON = 29;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D3200: _OR_TYPEID_VENDOR_NIKON = 30;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D700: _OR_TYPEID_VENDOR_NIKON = 31;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D800: _OR_TYPEID_VENDOR_NIKON = 32;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D800E: _OR_TYPEID_VENDOR_NIKON = 33;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D90: _OR_TYPEID_VENDOR_NIKON = 34;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D600: _OR_TYPEID_VENDOR_NIKON = 35;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_P7700: _OR_TYPEID_VENDOR_NIKON = 36;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_1_V2: _OR_TYPEID_VENDOR_NIKON = 37;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D5200: _OR_TYPEID_VENDOR_NIKON = 38;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D7100: _OR_TYPEID_VENDOR_NIKON = 39;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_A: _OR_TYPEID_VENDOR_NIKON = 40;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_1_J2: _OR_TYPEID_VENDOR_NIKON = 41;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_1_J3: _OR_TYPEID_VENDOR_NIKON = 42;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_1_S1: _OR_TYPEID_VENDOR_NIKON = 43;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D60: _OR_TYPEID_VENDOR_NIKON = 44;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_DF: _OR_TYPEID_VENDOR_NIKON = 45;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_E5400: _OR_TYPEID_VENDOR_NIKON = 46;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_E8400: _OR_TYPEID_VENDOR_NIKON = 47;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D4S: _OR_TYPEID_VENDOR_NIKON = 48;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D610: _OR_TYPEID_VENDOR_NIKON = 49;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D750: _OR_TYPEID_VENDOR_NIKON = 50;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_1_J5: _OR_TYPEID_VENDOR_NIKON = 51;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_1_V3: _OR_TYPEID_VENDOR_NIKON = 52;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D7200: _OR_TYPEID_VENDOR_NIKON = 53;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D5300: _OR_TYPEID_VENDOR_NIKON = 54;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D5500: _OR_TYPEID_VENDOR_NIKON = 55;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D3300: _OR_TYPEID_VENDOR_NIKON = 56;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D810: _OR_TYPEID_VENDOR_NIKON = 57;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D5600: _OR_TYPEID_VENDOR_NIKON = 58;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D3400: _OR_TYPEID_VENDOR_NIKON = 59;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D5: _OR_TYPEID_VENDOR_NIKON = 60;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D500: _OR_TYPEID_VENDOR_NIKON = 61;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_1_AW1: _OR_TYPEID_VENDOR_NIKON = 62;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_1_S2: _OR_TYPEID_VENDOR_NIKON = 63;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_1_J4: _OR_TYPEID_VENDOR_NIKON = 64;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_B700: _OR_TYPEID_VENDOR_NIKON = 65;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_P330: _OR_TYPEID_VENDOR_NIKON = 66;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_P340: _OR_TYPEID_VENDOR_NIKON = 67;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_Z6: _OR_TYPEID_VENDOR_NIKON = 68;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_Z7: _OR_TYPEID_VENDOR_NIKON = 69;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_P1000: _OR_TYPEID_VENDOR_NIKON = 70;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_E8800: _OR_TYPEID_VENDOR_NIKON = 71;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D3500: _OR_TYPEID_VENDOR_NIKON = 72;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D2HS: _OR_TYPEID_VENDOR_NIKON = 73;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D2XS: _OR_TYPEID_VENDOR_NIKON = 74;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_A1000: _OR_TYPEID_VENDOR_NIKON = 75;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D780: _OR_TYPEID_VENDOR_NIKON = 76;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_Z50: _OR_TYPEID_VENDOR_NIKON = 77;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_P950: _OR_TYPEID_VENDOR_NIKON = 78;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D6: _OR_TYPEID_VENDOR_NIKON = 79;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_Z5: _OR_TYPEID_VENDOR_NIKON = 80;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_Z6_2: _OR_TYPEID_VENDOR_NIKON = 81;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_Z7_2: _OR_TYPEID_VENDOR_NIKON = 82;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_ZFC: _OR_TYPEID_VENDOR_NIKON = 83;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_Z9: _OR_TYPEID_VENDOR_NIKON = 84;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D1H: _OR_TYPEID_VENDOR_NIKON = 85;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D7500: _OR_TYPEID_VENDOR_NIKON = 86;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_D850: _OR_TYPEID_VENDOR_NIKON = 87;
pub const _OR_TYPEID_VENDOR_NIKON_OR_TYPEID_NIKON_COOLPIX_P7800: _OR_TYPEID_VENDOR_NIKON = 88;
pub const _OR_TYPEID_VENDOR_NIKON__OR_TYPEID_NIKON_LAST: _OR_TYPEID_VENDOR_NIKON = 89;
#[doc = " @brief Nikon type IDs"]
pub type _OR_TYPEID_VENDOR_NIKON = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_UNKNOWN: _OR_TYPEID_VENDOR_LEICA = 0;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_DMR: _OR_TYPEID_VENDOR_LEICA = 1;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_M8: _OR_TYPEID_VENDOR_LEICA = 2;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_X1: _OR_TYPEID_VENDOR_LEICA = 3;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_DIGILUX2: _OR_TYPEID_VENDOR_LEICA = 4;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_DLUX_3: _OR_TYPEID_VENDOR_LEICA = 5;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_VLUX_1: _OR_TYPEID_VENDOR_LEICA = 6;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_M9: _OR_TYPEID_VENDOR_LEICA = 7;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_S2: _OR_TYPEID_VENDOR_LEICA = 8;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_M_MONOCHROM: _OR_TYPEID_VENDOR_LEICA = 9;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_X2: _OR_TYPEID_VENDOR_LEICA = 10;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_M_TYP240: _OR_TYPEID_VENDOR_LEICA = 11;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_X_VARIO: _OR_TYPEID_VENDOR_LEICA = 12;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_T_TYP701: _OR_TYPEID_VENDOR_LEICA = 13;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_Q_TYP116: _OR_TYPEID_VENDOR_LEICA = 14;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_X_TYP113: _OR_TYPEID_VENDOR_LEICA = 15;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_M10: _OR_TYPEID_VENDOR_LEICA = 16;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_SL_TYP601: _OR_TYPEID_VENDOR_LEICA = 17;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_DLUX_TYP109: _OR_TYPEID_VENDOR_LEICA = 18;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_VLUX_4: _OR_TYPEID_VENDOR_LEICA = 19;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_CL: _OR_TYPEID_VENDOR_LEICA = 20;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_VLUX_TYP114: _OR_TYPEID_VENDOR_LEICA = 21;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_CLUX: _OR_TYPEID_VENDOR_LEICA = 22;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_M10P: _OR_TYPEID_VENDOR_LEICA = 23;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_M10D: _OR_TYPEID_VENDOR_LEICA = 24;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_TL2: _OR_TYPEID_VENDOR_LEICA = 25;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_DLUX_5: _OR_TYPEID_VENDOR_LEICA = 26;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_DLUX_7: _OR_TYPEID_VENDOR_LEICA = 27;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_C_TYP112: _OR_TYPEID_VENDOR_LEICA = 28;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_VLUX_5: _OR_TYPEID_VENDOR_LEICA = 29;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_Q2: _OR_TYPEID_VENDOR_LEICA = 30;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_SL2: _OR_TYPEID_VENDOR_LEICA = 31;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_M10_MONOCHROM: _OR_TYPEID_VENDOR_LEICA = 32;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_M10R: _OR_TYPEID_VENDOR_LEICA = 33;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_M_MONOCHROM_TYP246: _OR_TYPEID_VENDOR_LEICA = 34;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_DLUX_4: _OR_TYPEID_VENDOR_LEICA = 35;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_SL2S: _OR_TYPEID_VENDOR_LEICA = 36;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_Q2_MONOCHROM: _OR_TYPEID_VENDOR_LEICA = 37;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_M11: _OR_TYPEID_VENDOR_LEICA = 38;
pub const _OR_TYPEID_VENDOR_LEICA_OR_TYPEID_LEICA_DIGILUX3: _OR_TYPEID_VENDOR_LEICA = 39;
pub const _OR_TYPEID_VENDOR_LEICA__OR_TYPEID_LEICA_LAST: _OR_TYPEID_VENDOR_LEICA = 40;
#[doc = " @brief Leica type IDs"]
pub type _OR_TYPEID_VENDOR_LEICA = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_UNKNOWN: _OR_TYPEID_VENDOR_PENTAX = 0;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K10D_PEF: _OR_TYPEID_VENDOR_PENTAX = 1;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K10D_DNG: _OR_TYPEID_VENDOR_PENTAX = 2;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_IST_D_PEF: _OR_TYPEID_VENDOR_PENTAX = 3;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_IST_DL_PEF: _OR_TYPEID_VENDOR_PENTAX = 4;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K100D_PEF: _OR_TYPEID_VENDOR_PENTAX = 5;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K100D_SUPER_PEF: _OR_TYPEID_VENDOR_PENTAX = 6;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K20D_PEF: _OR_TYPEID_VENDOR_PENTAX = 7;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_KR_PEF: _OR_TYPEID_VENDOR_PENTAX = 8;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_KX_PEF: _OR_TYPEID_VENDOR_PENTAX = 9;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K5_PEF: _OR_TYPEID_VENDOR_PENTAX = 10;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K7_PEF: _OR_TYPEID_VENDOR_PENTAX = 11;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_645D_PEF: _OR_TYPEID_VENDOR_PENTAX = 12;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_645D_DNG: _OR_TYPEID_VENDOR_PENTAX = 13;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K2000_DNG: _OR_TYPEID_VENDOR_PENTAX = 14;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_Q_DNG: _OR_TYPEID_VENDOR_PENTAX = 15;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K200D_DNG: _OR_TYPEID_VENDOR_PENTAX = 16;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_KM_PEF: _OR_TYPEID_VENDOR_PENTAX = 17;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_KX_DNG: _OR_TYPEID_VENDOR_PENTAX = 18;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_KR_DNG: _OR_TYPEID_VENDOR_PENTAX = 19;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K01_DNG: _OR_TYPEID_VENDOR_PENTAX = 20;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K30_DNG: _OR_TYPEID_VENDOR_PENTAX = 21;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K5_IIS_DNG: _OR_TYPEID_VENDOR_PENTAX = 22;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_MX1_DNG: _OR_TYPEID_VENDOR_PENTAX = 23;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_Q10_DNG: _OR_TYPEID_VENDOR_PENTAX = 24;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_Q7_DNG: _OR_TYPEID_VENDOR_PENTAX = 25;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K3_DNG: _OR_TYPEID_VENDOR_PENTAX = 26;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K50_DNG: _OR_TYPEID_VENDOR_PENTAX = 27;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K500_DNG: _OR_TYPEID_VENDOR_PENTAX = 28;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K200D_PEF: _OR_TYPEID_VENDOR_PENTAX = 29;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_IST_DS_PEF: _OR_TYPEID_VENDOR_PENTAX = 30;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K5_IIS_PEF: _OR_TYPEID_VENDOR_PENTAX = 31;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K3_II_DNG: _OR_TYPEID_VENDOR_PENTAX = 32;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K1_PEF: _OR_TYPEID_VENDOR_PENTAX = 33;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K1_DNG: _OR_TYPEID_VENDOR_PENTAX = 34;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K70_PEF: _OR_TYPEID_VENDOR_PENTAX = 35;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K70_DNG: _OR_TYPEID_VENDOR_PENTAX = 36;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_KS1_PEF: _OR_TYPEID_VENDOR_PENTAX = 37;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_KS1_DNG: _OR_TYPEID_VENDOR_PENTAX = 38;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_KS2_PEF: _OR_TYPEID_VENDOR_PENTAX = 39;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_KS2_DNG: _OR_TYPEID_VENDOR_PENTAX = 40;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_QS1_DNG: _OR_TYPEID_VENDOR_PENTAX = 41;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_QS1_PEF: _OR_TYPEID_VENDOR_PENTAX = 42;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_KP_PEF: _OR_TYPEID_VENDOR_PENTAX = 43;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_KP_DNG: _OR_TYPEID_VENDOR_PENTAX = 44;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K1_MKII_PEF: _OR_TYPEID_VENDOR_PENTAX = 45;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K1_MKII_DNG: _OR_TYPEID_VENDOR_PENTAX = 46;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K7_DNG: _OR_TYPEID_VENDOR_PENTAX = 47;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_IST_DL2_PEF: _OR_TYPEID_VENDOR_PENTAX = 48;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K5_II_PEF: _OR_TYPEID_VENDOR_PENTAX = 49;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K5_II_DNG: _OR_TYPEID_VENDOR_PENTAX = 50;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K3_PEF: _OR_TYPEID_VENDOR_PENTAX = 51;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K3_II_PEF: _OR_TYPEID_VENDOR_PENTAX = 52;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K110D_PEF: _OR_TYPEID_VENDOR_PENTAX = 53;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K3_MKIII_PEF: _OR_TYPEID_VENDOR_PENTAX = 54;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K3_MKIII_DNG: _OR_TYPEID_VENDOR_PENTAX = 55;
pub const _OR_TYPEID_VENDOR_PENTAX_OR_TYPEID_PENTAX_K2000_PEF: _OR_TYPEID_VENDOR_PENTAX = 56;
pub const _OR_TYPEID_VENDOR_PENTAX__OR_TYPEID_PENTAX_LAST: _OR_TYPEID_VENDOR_PENTAX = 57;
#[doc = " @brief Pentax type IDs"]
pub type _OR_TYPEID_VENDOR_PENTAX = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_EPSON_OR_TYPEID_EPSON_UNKNOWN: _OR_TYPEID_VENDOR_EPSON = 0;
pub const _OR_TYPEID_VENDOR_EPSON_OR_TYPEID_EPSON_RD1: _OR_TYPEID_VENDOR_EPSON = 1;
pub const _OR_TYPEID_VENDOR_EPSON_OR_TYPEID_EPSON_RD1S: _OR_TYPEID_VENDOR_EPSON = 2;
pub const _OR_TYPEID_VENDOR_EPSON_OR_TYPEID_EPSON_RD1X: _OR_TYPEID_VENDOR_EPSON = 3;
pub const _OR_TYPEID_VENDOR_EPSON__OR_TYPEID_EPSON_LAST: _OR_TYPEID_VENDOR_EPSON = 4;
#[doc = " @brief Epson type IDs"]
pub type _OR_TYPEID_VENDOR_EPSON = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_MINOLTA_OR_TYPEID_MINOLTA_UNKNOWN: _OR_TYPEID_VENDOR_MINOLTA = 0;
pub const _OR_TYPEID_VENDOR_MINOLTA_OR_TYPEID_MINOLTA_A1: _OR_TYPEID_VENDOR_MINOLTA = 1;
pub const _OR_TYPEID_VENDOR_MINOLTA_OR_TYPEID_MINOLTA_A2: _OR_TYPEID_VENDOR_MINOLTA = 2;
pub const _OR_TYPEID_VENDOR_MINOLTA_OR_TYPEID_MINOLTA_DIMAGE5: _OR_TYPEID_VENDOR_MINOLTA = 3;
pub const _OR_TYPEID_VENDOR_MINOLTA_OR_TYPEID_MINOLTA_DIMAGE7: _OR_TYPEID_VENDOR_MINOLTA = 4;
pub const _OR_TYPEID_VENDOR_MINOLTA_OR_TYPEID_MINOLTA_DIMAGE7I: _OR_TYPEID_VENDOR_MINOLTA = 5;
pub const _OR_TYPEID_VENDOR_MINOLTA_OR_TYPEID_MINOLTA_DIMAGE7HI: _OR_TYPEID_VENDOR_MINOLTA = 6;
pub const _OR_TYPEID_VENDOR_MINOLTA_OR_TYPEID_MINOLTA_MAXXUM_5D: _OR_TYPEID_VENDOR_MINOLTA = 7;
pub const _OR_TYPEID_VENDOR_MINOLTA_OR_TYPEID_MINOLTA_MAXXUM_7D: _OR_TYPEID_VENDOR_MINOLTA = 8;
pub const _OR_TYPEID_VENDOR_MINOLTA_OR_TYPEID_MINOLTA_A200: _OR_TYPEID_VENDOR_MINOLTA = 9;
pub const _OR_TYPEID_VENDOR_MINOLTA__OR_TYPEID_MINOLTA_LAST: _OR_TYPEID_VENDOR_MINOLTA = 10;
#[doc = " @brief Minolta type IDs"]
pub type _OR_TYPEID_VENDOR_MINOLTA = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_UNKNOWN: _OR_TYPEID_VENDOR_OLYMPUS = 0;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E1: _OR_TYPEID_VENDOR_OLYMPUS = 1;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E10: _OR_TYPEID_VENDOR_OLYMPUS = 2;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E3: _OR_TYPEID_VENDOR_OLYMPUS = 3;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E300: _OR_TYPEID_VENDOR_OLYMPUS = 4;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E330: _OR_TYPEID_VENDOR_OLYMPUS = 5;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E400: _OR_TYPEID_VENDOR_OLYMPUS = 6;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E410: _OR_TYPEID_VENDOR_OLYMPUS = 7;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E500: _OR_TYPEID_VENDOR_OLYMPUS = 8;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E510: _OR_TYPEID_VENDOR_OLYMPUS = 9;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_SP350: _OR_TYPEID_VENDOR_OLYMPUS = 10;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_SP510UZ: _OR_TYPEID_VENDOR_OLYMPUS = 11;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_SP550UZ: _OR_TYPEID_VENDOR_OLYMPUS = 12;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_SP500UZ: _OR_TYPEID_VENDOR_OLYMPUS = 13;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EP1: _OR_TYPEID_VENDOR_OLYMPUS = 14;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E620: _OR_TYPEID_VENDOR_OLYMPUS = 15;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EPL1: _OR_TYPEID_VENDOR_OLYMPUS = 16;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EP2: _OR_TYPEID_VENDOR_OLYMPUS = 17;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_XZ1: _OR_TYPEID_VENDOR_OLYMPUS = 18;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E5: _OR_TYPEID_VENDOR_OLYMPUS = 19;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EPL2: _OR_TYPEID_VENDOR_OLYMPUS = 20;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EP3: _OR_TYPEID_VENDOR_OLYMPUS = 21;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EPL3: _OR_TYPEID_VENDOR_OLYMPUS = 22;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EPM1: _OR_TYPEID_VENDOR_OLYMPUS = 23;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM5: _OR_TYPEID_VENDOR_OLYMPUS = 24;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_XZ2: _OR_TYPEID_VENDOR_OLYMPUS = 25;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EPM2: _OR_TYPEID_VENDOR_OLYMPUS = 26;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EPL5: _OR_TYPEID_VENDOR_OLYMPUS = 27;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM1: _OR_TYPEID_VENDOR_OLYMPUS = 28;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_STYLUS1: _OR_TYPEID_VENDOR_OLYMPUS = 29;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EPL6: _OR_TYPEID_VENDOR_OLYMPUS = 30;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EPL7: _OR_TYPEID_VENDOR_OLYMPUS = 31;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM5II: _OR_TYPEID_VENDOR_OLYMPUS = 32;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM1II: _OR_TYPEID_VENDOR_OLYMPUS = 33;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_PEN_F: _OR_TYPEID_VENDOR_OLYMPUS = 34;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM10: _OR_TYPEID_VENDOR_OLYMPUS = 35;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM10II: _OR_TYPEID_VENDOR_OLYMPUS = 36;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EPL8: _OR_TYPEID_VENDOR_OLYMPUS = 37;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_SH2: _OR_TYPEID_VENDOR_OLYMPUS = 38;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_XZ10: _OR_TYPEID_VENDOR_OLYMPUS = 39;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_TG4: _OR_TYPEID_VENDOR_OLYMPUS = 40;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EPL9: _OR_TYPEID_VENDOR_OLYMPUS = 41;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_STYLUS1_1S: _OR_TYPEID_VENDOR_OLYMPUS = 42;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM10III: _OR_TYPEID_VENDOR_OLYMPUS = 43;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_TG5: _OR_TYPEID_VENDOR_OLYMPUS = 44;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM1X: _OR_TYPEID_VENDOR_OLYMPUS = 45;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_TG6: _OR_TYPEID_VENDOR_OLYMPUS = 46;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM5III: _OR_TYPEID_VENDOR_OLYMPUS = 47;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_SP565UZ: _OR_TYPEID_VENDOR_OLYMPUS = 48;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EPL10: _OR_TYPEID_VENDOR_OLYMPUS = 49;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM1III: _OR_TYPEID_VENDOR_OLYMPUS = 50;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM10IV: _OR_TYPEID_VENDOR_OLYMPUS = 51;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EM10IIIS: _OR_TYPEID_VENDOR_OLYMPUS = 52;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_OM1: _OR_TYPEID_VENDOR_OLYMPUS = 53;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E30: _OR_TYPEID_VENDOR_OLYMPUS = 54;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_EP5: _OR_TYPEID_VENDOR_OLYMPUS = 55;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E420: _OR_TYPEID_VENDOR_OLYMPUS = 56;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E450: _OR_TYPEID_VENDOR_OLYMPUS = 57;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E520: _OR_TYPEID_VENDOR_OLYMPUS = 58;
pub const _OR_TYPEID_VENDOR_OLYMPUS_OR_TYPEID_OLYMPUS_E600: _OR_TYPEID_VENDOR_OLYMPUS = 59;
pub const _OR_TYPEID_VENDOR_OLYMPUS__OR_TYPEID_OLYMPUS_LAST: _OR_TYPEID_VENDOR_OLYMPUS = 60;
#[doc = " @brief Olympus (and its successor OM Digital Solutions type IDs"]
pub type _OR_TYPEID_VENDOR_OLYMPUS = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_SAMSUNG_OR_TYPEID_SAMSUNG_UNKNOWN: _OR_TYPEID_VENDOR_SAMSUNG = 0;
pub const _OR_TYPEID_VENDOR_SAMSUNG_OR_TYPEID_SAMSUNG_GX10: _OR_TYPEID_VENDOR_SAMSUNG = 1;
pub const _OR_TYPEID_VENDOR_SAMSUNG_OR_TYPEID_SAMSUNG_PRO815: _OR_TYPEID_VENDOR_SAMSUNG = 2;
pub const _OR_TYPEID_VENDOR_SAMSUNG__OR_TYPEID_SAMSUNG_LAST: _OR_TYPEID_VENDOR_SAMSUNG = 3;
#[doc = " @brief Samsung type IDs"]
pub type _OR_TYPEID_VENDOR_SAMSUNG = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_RICOH_OR_TYPEID_RICOH_UNKNOWN: _OR_TYPEID_VENDOR_RICOH = 0;
pub const _OR_TYPEID_VENDOR_RICOH_OR_TYPEID_RICOH_GR2: _OR_TYPEID_VENDOR_RICOH = 1;
pub const _OR_TYPEID_VENDOR_RICOH_OR_TYPEID_RICOH_GXR: _OR_TYPEID_VENDOR_RICOH = 2;
pub const _OR_TYPEID_VENDOR_RICOH_OR_TYPEID_RICOH_GXR_A16: _OR_TYPEID_VENDOR_RICOH = 3;
pub const _OR_TYPEID_VENDOR_RICOH_OR_TYPEID_RICOH_GR: _OR_TYPEID_VENDOR_RICOH = 4;
pub const _OR_TYPEID_VENDOR_RICOH_OR_TYPEID_RICOH_GX200: _OR_TYPEID_VENDOR_RICOH = 5;
pub const _OR_TYPEID_VENDOR_RICOH_OR_TYPEID_PENTAX_645Z_PEF: _OR_TYPEID_VENDOR_RICOH = 6;
pub const _OR_TYPEID_VENDOR_RICOH_OR_TYPEID_PENTAX_645Z_DNG: _OR_TYPEID_VENDOR_RICOH = 7;
pub const _OR_TYPEID_VENDOR_RICOH_OR_TYPEID_RICOH_GRII: _OR_TYPEID_VENDOR_RICOH = 8;
pub const _OR_TYPEID_VENDOR_RICOH_OR_TYPEID_RICOH_GRIII: _OR_TYPEID_VENDOR_RICOH = 9;
pub const _OR_TYPEID_VENDOR_RICOH_OR_TYPEID_RICOH_GRIIIX: _OR_TYPEID_VENDOR_RICOH = 10;
pub const _OR_TYPEID_VENDOR_RICOH__OR_TYPEID_RICOH_LAST: _OR_TYPEID_VENDOR_RICOH = 11;
#[doc = " @brief Ricoh type IDs"]
#[doc = ""]
#[doc = " Following the merger with Pentax newer cameras may be Pentax."]
pub type _OR_TYPEID_VENDOR_RICOH = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_UNKNOWN: _OR_TYPEID_VENDOR_SONY = 0;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A100: _OR_TYPEID_VENDOR_SONY = 1;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A200: _OR_TYPEID_VENDOR_SONY = 2;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A700: _OR_TYPEID_VENDOR_SONY = 3;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A550: _OR_TYPEID_VENDOR_SONY = 4;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A380: _OR_TYPEID_VENDOR_SONY = 5;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A390: _OR_TYPEID_VENDOR_SONY = 5;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_SLTA55: _OR_TYPEID_VENDOR_SONY = 7;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_SLTA77: _OR_TYPEID_VENDOR_SONY = 8;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_NEX3: _OR_TYPEID_VENDOR_SONY = 9;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_NEX3N: _OR_TYPEID_VENDOR_SONY = 10;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_NEX5: _OR_TYPEID_VENDOR_SONY = 11;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_NEX5N: _OR_TYPEID_VENDOR_SONY = 12;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_NEX5R: _OR_TYPEID_VENDOR_SONY = 13;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_NEX5T: _OR_TYPEID_VENDOR_SONY = 14;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_NEX6: _OR_TYPEID_VENDOR_SONY = 15;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_NEX7: _OR_TYPEID_VENDOR_SONY = 16;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_NEXC3: _OR_TYPEID_VENDOR_SONY = 17;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_NEXF3: _OR_TYPEID_VENDOR_SONY = 18;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_SLTA65: _OR_TYPEID_VENDOR_SONY = 19;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A330: _OR_TYPEID_VENDOR_SONY = 21;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A450: _OR_TYPEID_VENDOR_SONY = 22;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A580: _OR_TYPEID_VENDOR_SONY = 23;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A850: _OR_TYPEID_VENDOR_SONY = 24;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A900: _OR_TYPEID_VENDOR_SONY = 25;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_SLTA35: _OR_TYPEID_VENDOR_SONY = 26;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_SLTA33: _OR_TYPEID_VENDOR_SONY = 27;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A560: _OR_TYPEID_VENDOR_SONY = 28;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_SLTA99: _OR_TYPEID_VENDOR_SONY = 29;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX100: _OR_TYPEID_VENDOR_SONY = 30;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX100M2: _OR_TYPEID_VENDOR_SONY = 31;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX100M3: _OR_TYPEID_VENDOR_SONY = 32;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX100M4: _OR_TYPEID_VENDOR_SONY = 33;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX100M5: _OR_TYPEID_VENDOR_SONY = 34;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX100M6: _OR_TYPEID_VENDOR_SONY = 35;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX1: _OR_TYPEID_VENDOR_SONY = 36;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX1R: _OR_TYPEID_VENDOR_SONY = 37;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX10: _OR_TYPEID_VENDOR_SONY = 38;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX10M2: _OR_TYPEID_VENDOR_SONY = 39;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX10M3: _OR_TYPEID_VENDOR_SONY = 40;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX1RM2: _OR_TYPEID_VENDOR_SONY = 41;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX10M4: _OR_TYPEID_VENDOR_SONY = 42;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX0: _OR_TYPEID_VENDOR_SONY = 43;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_SLTA57: _OR_TYPEID_VENDOR_SONY = 44;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7: _OR_TYPEID_VENDOR_SONY = 45;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7M2: _OR_TYPEID_VENDOR_SONY = 46;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7M3: _OR_TYPEID_VENDOR_SONY = 47;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7R: _OR_TYPEID_VENDOR_SONY = 48;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7RM2: _OR_TYPEID_VENDOR_SONY = 49;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7RM3: _OR_TYPEID_VENDOR_SONY = 50;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7S: _OR_TYPEID_VENDOR_SONY = 51;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7SM2: _OR_TYPEID_VENDOR_SONY = 52;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE9: _OR_TYPEID_VENDOR_SONY = 53;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE3000: _OR_TYPEID_VENDOR_SONY = 54;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE3500: _OR_TYPEID_VENDOR_SONY = 54;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_SLTA58: _OR_TYPEID_VENDOR_SONY = 55;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE6000: _OR_TYPEID_VENDOR_SONY = 56;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCA99M2: _OR_TYPEID_VENDOR_SONY = 57;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE6300: _OR_TYPEID_VENDOR_SONY = 58;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE6500: _OR_TYPEID_VENDOR_SONY = 59;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE5100: _OR_TYPEID_VENDOR_SONY = 60;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A230: _OR_TYPEID_VENDOR_SONY = 61;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A500: _OR_TYPEID_VENDOR_SONY = 62;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_SLTA37: _OR_TYPEID_VENDOR_SONY = 63;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCA77M2: _OR_TYPEID_VENDOR_SONY = 64;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCA68: _OR_TYPEID_VENDOR_SONY = 65;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE5000: _OR_TYPEID_VENDOR_SONY = 66;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A290: _OR_TYPEID_VENDOR_SONY = 67;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX100M5A: _OR_TYPEID_VENDOR_SONY = 68;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_HX99: _OR_TYPEID_VENDOR_SONY = 69;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE6400: _OR_TYPEID_VENDOR_SONY = 70;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX0M2: _OR_TYPEID_VENDOR_SONY = 71;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7RM4: _OR_TYPEID_VENDOR_SONY = 72;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_RX100M7: _OR_TYPEID_VENDOR_SONY = 73;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE6100: _OR_TYPEID_VENDOR_SONY = 74;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE6600: _OR_TYPEID_VENDOR_SONY = 75;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE9M2: _OR_TYPEID_VENDOR_SONY = 76;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ZV1: _OR_TYPEID_VENDOR_SONY = 77;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_R1: _OR_TYPEID_VENDOR_SONY = 78;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7SM3: _OR_TYPEID_VENDOR_SONY = 79;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7C: _OR_TYPEID_VENDOR_SONY = 80;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ZVE10: _OR_TYPEID_VENDOR_SONY = 81;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE1: _OR_TYPEID_VENDOR_SONY = 82;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7M4: _OR_TYPEID_VENDOR_SONY = 83;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCEQX1: _OR_TYPEID_VENDOR_SONY = 84;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A350: _OR_TYPEID_VENDOR_SONY = 85;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_A300: _OR_TYPEID_VENDOR_SONY = 86;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7RM3A: _OR_TYPEID_VENDOR_SONY = 87;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_ILCE7RM4A: _OR_TYPEID_VENDOR_SONY = 88;
pub const _OR_TYPEID_VENDOR_SONY_OR_TYPEID_SONY_HX95: _OR_TYPEID_VENDOR_SONY = 89;
pub const _OR_TYPEID_VENDOR_SONY__OR_TYPEID_SONY_LAST: _OR_TYPEID_VENDOR_SONY = 90;
#[doc = " @brief Sony type IDs"]
pub type _OR_TYPEID_VENDOR_SONY = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_UNKNOWN: _OR_TYPEID_VENDOR_PANASONIC = 0;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GF1: _OR_TYPEID_VENDOR_PANASONIC = 1;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GF2: _OR_TYPEID_VENDOR_PANASONIC = 2;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ30: _OR_TYPEID_VENDOR_PANASONIC = 3;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_G10: _OR_TYPEID_VENDOR_PANASONIC = 4;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GH1: _OR_TYPEID_VENDOR_PANASONIC = 5;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GH2: _OR_TYPEID_VENDOR_PANASONIC = 6;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_LX2: _OR_TYPEID_VENDOR_PANASONIC = 7;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_LX3: _OR_TYPEID_VENDOR_PANASONIC = 8;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_LX5: _OR_TYPEID_VENDOR_PANASONIC = 9;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ8: _OR_TYPEID_VENDOR_PANASONIC = 10;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ18: _OR_TYPEID_VENDOR_PANASONIC = 11;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ50: _OR_TYPEID_VENDOR_PANASONIC = 12;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_L1: _OR_TYPEID_VENDOR_PANASONIC = 13;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_G1: _OR_TYPEID_VENDOR_PANASONIC = 14;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_G2: _OR_TYPEID_VENDOR_PANASONIC = 15;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_L10: _OR_TYPEID_VENDOR_PANASONIC = 16;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ28: _OR_TYPEID_VENDOR_PANASONIC = 17;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GF3: _OR_TYPEID_VENDOR_PANASONIC = 18;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ100: _OR_TYPEID_VENDOR_PANASONIC = 19;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GX1: _OR_TYPEID_VENDOR_PANASONIC = 20;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_G3: _OR_TYPEID_VENDOR_PANASONIC = 21;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_G5: _OR_TYPEID_VENDOR_PANASONIC = 22;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GF5: _OR_TYPEID_VENDOR_PANASONIC = 23;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_LX7: _OR_TYPEID_VENDOR_PANASONIC = 24;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GH3: _OR_TYPEID_VENDOR_PANASONIC = 25;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ200: _OR_TYPEID_VENDOR_PANASONIC = 26;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GF6: _OR_TYPEID_VENDOR_PANASONIC = 27;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GX7: _OR_TYPEID_VENDOR_PANASONIC = 28;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GM1: _OR_TYPEID_VENDOR_PANASONIC = 29;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GH4: _OR_TYPEID_VENDOR_PANASONIC = 30;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_LX100: _OR_TYPEID_VENDOR_PANASONIC = 31;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GM5: _OR_TYPEID_VENDOR_PANASONIC = 32;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_G80: _OR_TYPEID_VENDOR_PANASONIC = 33;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_G85: _OR_TYPEID_VENDOR_PANASONIC = 33;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_LX10: _OR_TYPEID_VENDOR_PANASONIC = 34;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_LX15: _OR_TYPEID_VENDOR_PANASONIC = 34;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ2500: _OR_TYPEID_VENDOR_PANASONIC = 35;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ2000: _OR_TYPEID_VENDOR_PANASONIC = 35;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GX8: _OR_TYPEID_VENDOR_PANASONIC = 36;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_ZS100: _OR_TYPEID_VENDOR_PANASONIC = 37;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_TX1: _OR_TYPEID_VENDOR_PANASONIC = 37;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_TZ100: _OR_TYPEID_VENDOR_PANASONIC = 37;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_TZ110: _OR_TYPEID_VENDOR_PANASONIC = 37;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GX80: _OR_TYPEID_VENDOR_PANASONIC = 38;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GX85: _OR_TYPEID_VENDOR_PANASONIC = 38;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GH5: _OR_TYPEID_VENDOR_PANASONIC = 39;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GX850: _OR_TYPEID_VENDOR_PANASONIC = 40;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ80: _OR_TYPEID_VENDOR_PANASONIC = 41;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ82: _OR_TYPEID_VENDOR_PANASONIC = 41;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ330: _OR_TYPEID_VENDOR_PANASONIC = 42;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_TZ70: _OR_TYPEID_VENDOR_PANASONIC = 43;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_ZS60: _OR_TYPEID_VENDOR_PANASONIC = 44;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_TZ80: _OR_TYPEID_VENDOR_PANASONIC = 44;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GF7: _OR_TYPEID_VENDOR_PANASONIC = 46;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_CM1: _OR_TYPEID_VENDOR_PANASONIC = 47;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GX9: _OR_TYPEID_VENDOR_PANASONIC = 48;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GX800: _OR_TYPEID_VENDOR_PANASONIC = 49;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_G9: _OR_TYPEID_VENDOR_PANASONIC = 52;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_FZ45: _OR_TYPEID_VENDOR_PANASONIC = 53;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GH5S: _OR_TYPEID_VENDOR_PANASONIC = 54;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_LX1: _OR_TYPEID_VENDOR_PANASONIC = 55;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ150: _OR_TYPEID_VENDOR_PANASONIC = 56;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_FZ35: _OR_TYPEID_VENDOR_PANASONIC = 57;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_ZS200: _OR_TYPEID_VENDOR_PANASONIC = 58;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_TX2: _OR_TYPEID_VENDOR_PANASONIC = 58;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_TZ202: _OR_TYPEID_VENDOR_PANASONIC = 58;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GX7MK2: _OR_TYPEID_VENDOR_PANASONIC = 59;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_LX100M2: _OR_TYPEID_VENDOR_PANASONIC = 60;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DMC_FZ40: _OR_TYPEID_VENDOR_PANASONIC =
    61;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DMC_FZ45: _OR_TYPEID_VENDOR_PANASONIC =
    61;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_S1: _OR_TYPEID_VENDOR_PANASONIC = 62;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_S1R: _OR_TYPEID_VENDOR_PANASONIC = 63;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_G95: _OR_TYPEID_VENDOR_PANASONIC = 64;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DMC_FZ1000: _OR_TYPEID_VENDOR_PANASONIC =
    65;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_FZ1000M2: _OR_TYPEID_VENDOR_PANASONIC =
    66;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_ZS80: _OR_TYPEID_VENDOR_PANASONIC = 67;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_TZ95: _OR_TYPEID_VENDOR_PANASONIC = 67;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GF10: _OR_TYPEID_VENDOR_PANASONIC = 68;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GX880: _OR_TYPEID_VENDOR_PANASONIC = 68;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_G99: _OR_TYPEID_VENDOR_PANASONIC = 69;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_G91: _OR_TYPEID_VENDOR_PANASONIC = 69;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_S1H: _OR_TYPEID_VENDOR_PANASONIC = 70;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_G100: _OR_TYPEID_VENDOR_PANASONIC = 71;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_G110: _OR_TYPEID_VENDOR_PANASONIC = 71;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_DC_S5: _OR_TYPEID_VENDOR_PANASONIC = 72;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GH5M2: _OR_TYPEID_VENDOR_PANASONIC = 73;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_GH6: _OR_TYPEID_VENDOR_PANASONIC = 74;
pub const _OR_TYPEID_VENDOR_PANASONIC_OR_TYPEID_PANASONIC_G7: _OR_TYPEID_VENDOR_PANASONIC = 75;
pub const _OR_TYPEID_VENDOR_PANASONIC__OR_TYPEID_PANASONIC_LAST: _OR_TYPEID_VENDOR_PANASONIC = 76;
#[doc = " @brief Panasonic type IDs"]
pub type _OR_TYPEID_VENDOR_PANASONIC = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_UNKNOWN: _OR_TYPEID_VENDOR_FUJIFILM = 0;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_F700: _OR_TYPEID_VENDOR_FUJIFILM = 1;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_E900: _OR_TYPEID_VENDOR_FUJIFILM = 2;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_S2PRO: _OR_TYPEID_VENDOR_FUJIFILM = 3;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_S3PRO: _OR_TYPEID_VENDOR_FUJIFILM = 4;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_S5PRO: _OR_TYPEID_VENDOR_FUJIFILM = 5;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_F810: _OR_TYPEID_VENDOR_FUJIFILM = 6;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_S5000: _OR_TYPEID_VENDOR_FUJIFILM = 7;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_S5600: _OR_TYPEID_VENDOR_FUJIFILM = 8;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_S9500: _OR_TYPEID_VENDOR_FUJIFILM = 9;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_S6500FD: _OR_TYPEID_VENDOR_FUJIFILM = 10;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_HS10: _OR_TYPEID_VENDOR_FUJIFILM = 11;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_HS30EXR: _OR_TYPEID_VENDOR_FUJIFILM = 12;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_HS33EXR: _OR_TYPEID_VENDOR_FUJIFILM = 12;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_S200EXR: _OR_TYPEID_VENDOR_FUJIFILM = 13;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_X100: _OR_TYPEID_VENDOR_FUJIFILM = 14;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_X100S: _OR_TYPEID_VENDOR_FUJIFILM = 15;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_X100T: _OR_TYPEID_VENDOR_FUJIFILM = 16;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_X100F: _OR_TYPEID_VENDOR_FUJIFILM = 17;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_X10: _OR_TYPEID_VENDOR_FUJIFILM = 18;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_X20: _OR_TYPEID_VENDOR_FUJIFILM = 19;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_X30: _OR_TYPEID_VENDOR_FUJIFILM = 20;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_X70: _OR_TYPEID_VENDOR_FUJIFILM = 21;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XPRO1: _OR_TYPEID_VENDOR_FUJIFILM = 22;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XPRO2: _OR_TYPEID_VENDOR_FUJIFILM = 23;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XS1: _OR_TYPEID_VENDOR_FUJIFILM = 24;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XE1: _OR_TYPEID_VENDOR_FUJIFILM = 25;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XE2: _OR_TYPEID_VENDOR_FUJIFILM = 26;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XE2S: _OR_TYPEID_VENDOR_FUJIFILM = 27;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XE3: _OR_TYPEID_VENDOR_FUJIFILM = 28;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XF1: _OR_TYPEID_VENDOR_FUJIFILM = 29;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XM1: _OR_TYPEID_VENDOR_FUJIFILM = 30;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XT1: _OR_TYPEID_VENDOR_FUJIFILM = 31;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XT10: _OR_TYPEID_VENDOR_FUJIFILM = 32;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XT100: _OR_TYPEID_VENDOR_FUJIFILM = 33;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XT2: _OR_TYPEID_VENDOR_FUJIFILM = 34;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XT20: _OR_TYPEID_VENDOR_FUJIFILM = 35;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XT3: _OR_TYPEID_VENDOR_FUJIFILM = 36;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XA1: _OR_TYPEID_VENDOR_FUJIFILM = 37;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XA2: _OR_TYPEID_VENDOR_FUJIFILM = 38;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XA3: _OR_TYPEID_VENDOR_FUJIFILM = 39;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XA5: _OR_TYPEID_VENDOR_FUJIFILM = 40;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XQ1: _OR_TYPEID_VENDOR_FUJIFILM = 41;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XQ2: _OR_TYPEID_VENDOR_FUJIFILM = 42;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XH1: _OR_TYPEID_VENDOR_FUJIFILM = 43;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_GFX50S: _OR_TYPEID_VENDOR_FUJIFILM = 44;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_GFX50R: _OR_TYPEID_VENDOR_FUJIFILM = 45;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XF10: _OR_TYPEID_VENDOR_FUJIFILM = 46;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XT30: _OR_TYPEID_VENDOR_FUJIFILM = 47;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_GFX100: _OR_TYPEID_VENDOR_FUJIFILM = 48;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XA7: _OR_TYPEID_VENDOR_FUJIFILM = 49;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XPRO3: _OR_TYPEID_VENDOR_FUJIFILM = 50;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XT200: _OR_TYPEID_VENDOR_FUJIFILM = 51;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_X100V: _OR_TYPEID_VENDOR_FUJIFILM = 52;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XT4: _OR_TYPEID_VENDOR_FUJIFILM = 53;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_F550EXR: _OR_TYPEID_VENDOR_FUJIFILM = 54;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_S100FS: _OR_TYPEID_VENDOR_FUJIFILM = 55;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XS10: _OR_TYPEID_VENDOR_FUJIFILM = 56;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XT30_II: _OR_TYPEID_VENDOR_FUJIFILM = 57;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_GFX50S_II: _OR_TYPEID_VENDOR_FUJIFILM = 58;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_GFX100S: _OR_TYPEID_VENDOR_FUJIFILM = 59;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XE4: _OR_TYPEID_VENDOR_FUJIFILM = 60;
pub const _OR_TYPEID_VENDOR_FUJIFILM_OR_TYPEID_FUJIFILM_XA10: _OR_TYPEID_VENDOR_FUJIFILM = 61;
pub const _OR_TYPEID_VENDOR_FUJIFILM__OR_TYPEID_FUJIFILM_LAST: _OR_TYPEID_VENDOR_FUJIFILM = 62;
#[doc = " @brief Fujifilm type IDs"]
pub type _OR_TYPEID_VENDOR_FUJIFILM = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_BLACKMAGIC_OR_TYPEID_BLACKMAGIC_UNKNOWN: _OR_TYPEID_VENDOR_BLACKMAGIC =
    0;
pub const _OR_TYPEID_VENDOR_BLACKMAGIC_OR_TYPEID_BLACKMAGIC_POCKET_CINEMA:
    _OR_TYPEID_VENDOR_BLACKMAGIC = 1;
pub const _OR_TYPEID_VENDOR_BLACKMAGIC__OR_TYPEID_BLACKMAGIC_LAST: _OR_TYPEID_VENDOR_BLACKMAGIC = 2;
pub type _OR_TYPEID_VENDOR_BLACKMAGIC = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_XIAOYI_OR_TYPEID_XIAOYI_UNKNOWN: _OR_TYPEID_VENDOR_XIAOYI = 0;
pub const _OR_TYPEID_VENDOR_XIAOYI_OR_TYPEID_XIAOYI_M1: _OR_TYPEID_VENDOR_XIAOYI = 1;
pub const _OR_TYPEID_VENDOR_XIAOYI_OR_TYPEID_XIAOYI_YDXJ_2: _OR_TYPEID_VENDOR_XIAOYI = 2;
pub const _OR_TYPEID_VENDOR_XIAOYI_OR_TYPEID_XIAOYI_YIAC_3: _OR_TYPEID_VENDOR_XIAOYI = 3;
pub const _OR_TYPEID_VENDOR_XIAOYI__OR_TYPEID_XIAOYI_LAST: _OR_TYPEID_VENDOR_XIAOYI = 4;
pub type _OR_TYPEID_VENDOR_XIAOYI = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_APPLE_OR_TYPEID_APPLE_UNKNOWN: _OR_TYPEID_VENDOR_APPLE = 0;
pub const _OR_TYPEID_VENDOR_APPLE_OR_TYPEID_APPLE_IPHONE_6SPLUS: _OR_TYPEID_VENDOR_APPLE = 1;
pub const _OR_TYPEID_VENDOR_APPLE_OR_TYPEID_APPLE_IPHONE_7PLUS: _OR_TYPEID_VENDOR_APPLE = 2;
pub const _OR_TYPEID_VENDOR_APPLE_OR_TYPEID_APPLE_IPHONE_SE: _OR_TYPEID_VENDOR_APPLE = 3;
pub const _OR_TYPEID_VENDOR_APPLE_OR_TYPEID_APPLE_IPHONE_8: _OR_TYPEID_VENDOR_APPLE = 4;
pub const _OR_TYPEID_VENDOR_APPLE_OR_TYPEID_APPLE_IPHONE_XS: _OR_TYPEID_VENDOR_APPLE = 5;
pub const _OR_TYPEID_VENDOR_APPLE_OR_TYPEID_APPLE_IPHONE_12_PRO: _OR_TYPEID_VENDOR_APPLE = 6;
pub const _OR_TYPEID_VENDOR_APPLE_OR_TYPEID_APPLE_IPHONE_13_PRO: _OR_TYPEID_VENDOR_APPLE = 7;
pub const _OR_TYPEID_VENDOR_APPLE__OR_TYPEID_APPLE_LAST: _OR_TYPEID_VENDOR_APPLE = 8;
pub type _OR_TYPEID_VENDOR_APPLE = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_SIGMA_OR_TYPEID_SIGMA_UNKNOWN: _OR_TYPEID_VENDOR_SIGMA = 0;
pub const _OR_TYPEID_VENDOR_SIGMA_OR_TYPEID_SIGMA_FP: _OR_TYPEID_VENDOR_SIGMA = 1;
pub const _OR_TYPEID_VENDOR_SIGMA_OR_TYPEID_SIGMA_FP_L: _OR_TYPEID_VENDOR_SIGMA = 2;
pub const _OR_TYPEID_VENDOR_SIGMA__OR_TYPEID_SIGMA_LAST: _OR_TYPEID_VENDOR_SIGMA = 3;
pub type _OR_TYPEID_VENDOR_SIGMA = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_GOPRO_OR_TYPEID_GOPRO_UNKNOWN: _OR_TYPEID_VENDOR_GOPRO = 0;
pub const _OR_TYPEID_VENDOR_GOPRO_OR_TYPEID_GOPRO_HERO5_BLACK: _OR_TYPEID_VENDOR_GOPRO = 1;
pub const _OR_TYPEID_VENDOR_GOPRO_OR_TYPEID_GOPRO_HERO6_BLACK: _OR_TYPEID_VENDOR_GOPRO = 2;
pub const _OR_TYPEID_VENDOR_GOPRO_OR_TYPEID_GOPRO_HERO7_BLACK: _OR_TYPEID_VENDOR_GOPRO = 3;
pub const _OR_TYPEID_VENDOR_GOPRO_OR_TYPEID_GOPRO_HERO8_BLACK: _OR_TYPEID_VENDOR_GOPRO = 4;
pub const _OR_TYPEID_VENDOR_GOPRO_OR_TYPEID_GOPRO_HERO9_BLACK: _OR_TYPEID_VENDOR_GOPRO = 5;
pub const _OR_TYPEID_VENDOR_GOPRO_OR_TYPEID_GOPRO_HERO10_BLACK: _OR_TYPEID_VENDOR_GOPRO = 6;
pub const _OR_TYPEID_VENDOR_GOPRO__OR_TYPEID_GOPRO_LAST: _OR_TYPEID_VENDOR_GOPRO = 7;
pub type _OR_TYPEID_VENDOR_GOPRO = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_HASSELBLAD_OR_TYPEID_HASSELBLAD_UNKNOWN: _OR_TYPEID_VENDOR_HASSELBLAD =
    0;
pub const _OR_TYPEID_VENDOR_HASSELBLAD_OR_TYPEID_HASSELBLAD_LUNAR: _OR_TYPEID_VENDOR_HASSELBLAD = 1;
pub const _OR_TYPEID_VENDOR_HASSELBLAD_OR_TYPEID_HASSELBLAD_L1D_20C: _OR_TYPEID_VENDOR_HASSELBLAD =
    2;
pub const _OR_TYPEID_VENDOR_HASSELBLAD__OR_TYPEID_HASSELBLAD_LAST: _OR_TYPEID_VENDOR_HASSELBLAD = 3;
pub type _OR_TYPEID_VENDOR_HASSELBLAD = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_ZEISS_OR_TYPEID_ZEISS_UNKNOWN: _OR_TYPEID_VENDOR_ZEISS = 0;
pub const _OR_TYPEID_VENDOR_ZEISS_OR_TYPEID_ZEISS_ZX1: _OR_TYPEID_VENDOR_ZEISS = 1;
pub const _OR_TYPEID_VENDOR_ZEISS__OR_TYPEID_ZEISS_LAST: _OR_TYPEID_VENDOR_ZEISS = 2;
pub type _OR_TYPEID_VENDOR_ZEISS = ::std::os::raw::c_uint;
pub const _OR_TYPEID_VENDOR_DJI_OR_TYPEID_DJI_UNKNOWN: _OR_TYPEID_VENDOR_DJI = 0;
pub const _OR_TYPEID_VENDOR_DJI_OR_TYPEID_DJI_FC350: _OR_TYPEID_VENDOR_DJI = 1;
pub const _OR_TYPEID_VENDOR_DJI_OR_TYPEID_DJI_FC7303: _OR_TYPEID_VENDOR_DJI = 2;
pub const _OR_TYPEID_VENDOR_DJI_OR_TYPEID_DJI_OSMO_ACTION: _OR_TYPEID_VENDOR_DJI = 3;
pub const _OR_TYPEID_VENDOR_DJI_OR_TYPEID_DJI_FC220: _OR_TYPEID_VENDOR_DJI = 4;
pub const _OR_TYPEID_VENDOR_DJI_OR_TYPEID_DJI_FC6310: _OR_TYPEID_VENDOR_DJI = 5;
pub const _OR_TYPEID_VENDOR_DJI__OR_TYPEID_DJI_LAST: _OR_TYPEID_VENDOR_DJI = 6;
pub type _OR_TYPEID_VENDOR_DJI = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__sigset_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<fd_set>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_internal_slist>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            let uninit =
                ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            let uninit =
                ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__wseq32) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            let uninit =
                ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            let uninit =
                ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__g1_start32) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: _bindgen_ty_2 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_2 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_2 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_2 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_2 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_2 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_2 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_2 = 7;
pub const _PC_VDISABLE: _bindgen_ty_2 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_2 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_2 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_2 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_2 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_2 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_2 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_2 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_2 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_2 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_2 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_2 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_2 = 20;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_3 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_3 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_3 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_3 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_3 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_3 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_3 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_3 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_3 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_3 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_3 = 10;
pub const _SC_TIMERS: _bindgen_ty_3 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_3 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_3 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_3 = 14;
pub const _SC_FSYNC: _bindgen_ty_3 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_3 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_3 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_3 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_3 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_3 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_3 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_3 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_3 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_3 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_3 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_3 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_3 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_3 = 28;
pub const _SC_VERSION: _bindgen_ty_3 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_3 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_3 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_3 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_3 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_3 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_3 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_3 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_3 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_3 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_3 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_3 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_3 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_3 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_3 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_3 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_3 = 45;
pub const _SC_2_VERSION: _bindgen_ty_3 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_3 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_3 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_3 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_3 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_3 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_3 = 52;
pub const _SC_PII: _bindgen_ty_3 = 53;
pub const _SC_PII_XTI: _bindgen_ty_3 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_3 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_3 = 56;
pub const _SC_PII_OSI: _bindgen_ty_3 = 57;
pub const _SC_POLL: _bindgen_ty_3 = 58;
pub const _SC_SELECT: _bindgen_ty_3 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_3 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_3 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_3 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_3 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_3 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_3 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_3 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_3 = 66;
pub const _SC_THREADS: _bindgen_ty_3 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_3 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_3 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_3 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_3 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_3 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_3 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_3 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_3 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_3 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_3 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_3 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_3 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_3 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_3 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_3 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_3 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_3 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_3 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_3 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_3 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_3 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_3 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_3 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_3 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_3 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_3 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_3 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_3 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_3 = 96;
pub const _SC_2_UPE: _bindgen_ty_3 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_3 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_3 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_3 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_3 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_3 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_3 = 103;
pub const _SC_INT_MAX: _bindgen_ty_3 = 104;
pub const _SC_INT_MIN: _bindgen_ty_3 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_3 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_3 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_3 = 108;
pub const _SC_NZERO: _bindgen_ty_3 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_3 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_3 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_3 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_3 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_3 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_3 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_3 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_3 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_3 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_3 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_3 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_3 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_3 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_3 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_3 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_3 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_3 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_3 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_3 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_3 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_3 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_3 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_3 = 132;
pub const _SC_BARRIERS: _bindgen_ty_3 = 133;
pub const _SC_BASE: _bindgen_ty_3 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_3 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_3 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_3 = 137;
pub const _SC_CPUTIME: _bindgen_ty_3 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_3 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_3 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_3 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_3 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_3 = 143;
pub const _SC_FIFO: _bindgen_ty_3 = 144;
pub const _SC_PIPE: _bindgen_ty_3 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_3 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_3 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_3 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_3 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_3 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_3 = 151;
pub const _SC_NETWORKING: _bindgen_ty_3 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_3 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_3 = 154;
pub const _SC_REGEXP: _bindgen_ty_3 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_3 = 156;
pub const _SC_SHELL: _bindgen_ty_3 = 157;
pub const _SC_SIGNALS: _bindgen_ty_3 = 158;
pub const _SC_SPAWN: _bindgen_ty_3 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_3 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_3 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_3 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_3 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_3 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_3 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_3 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_3 = 167;
pub const _SC_2_PBS: _bindgen_ty_3 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_3 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_3 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_3 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_3 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_3 = 173;
pub const _SC_STREAMS: _bindgen_ty_3 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_3 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_3 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_3 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_3 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_3 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_3 = 180;
pub const _SC_TRACE: _bindgen_ty_3 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_3 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_3 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_3 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_3 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_3 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_3 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_3 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_3 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_3 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_3 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_3 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_3 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_3 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_3 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_3 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_3 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_3 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_3 = 199;
pub const _SC_IPV6: _bindgen_ty_3 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_3 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_3 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_3 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_3 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_3 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_3 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_3 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_3 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_3 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_3 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_3 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_3 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_3 = 248;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_4 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_4 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_4 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_4 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_4 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_4 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_4 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_4 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_4 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_4 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_4 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_4 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_4 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_4 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_4 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_4 = 1149;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: size_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<flock>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<flock>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<flock>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<flock>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<flock>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<stat>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOFile {
    _unused: [u8; 0],
}
#[doc = " @brief A file reference"]
pub type IOFileRef = *mut _IOFile;
#[doc = " @brief IO methods for the IO subsystem."]
#[doc = ""]
#[doc = " This allow implementing custom IO callback."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_methods {
    #[doc = " @brief open method"]
    #[doc = " @return a descriptor"]
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
        ) -> IOFileRef,
    >,
    #[doc = " @brief close method"]
    pub close: ::std::option::Option<unsafe extern "C" fn(f: IOFileRef) -> ::std::os::raw::c_int>,
    #[doc = " @brief seek in the file"]
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            f: IOFileRef,
            offset: off_t,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " @brief read method"]
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            f: IOFileRef,
            buf: *mut ::std::os::raw::c_void,
            count: size_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " @brief filesize method"]
    pub filesize: ::std::option::Option<unsafe extern "C" fn(f: IOFileRef) -> off_t>,
    #[doc = " @brief mmap method"]
    pub mmap: ::std::option::Option<
        unsafe extern "C" fn(f: IOFileRef, l: size_t, offset: off_t) -> *mut ::std::os::raw::c_void,
    >,
    #[doc = " @brief munmap method"]
    pub munmap: ::std::option::Option<
        unsafe extern "C" fn(
            f: IOFileRef,
            addr: *mut ::std::os::raw::c_void,
            l: size_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_io_methods() {
    assert_eq!(
        ::std::mem::size_of::<io_methods>(),
        56usize,
        concat!("Size of: ", stringify!(io_methods))
    );
    assert_eq!(
        ::std::mem::align_of::<io_methods>(),
        8usize,
        concat!("Alignment of ", stringify!(io_methods))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<io_methods>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_methods),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<io_methods>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_methods),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<io_methods>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_methods),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<io_methods>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_methods),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<io_methods>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).filesize) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(io_methods),
            "::",
            stringify!(filesize)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<io_methods>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).mmap) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(io_methods),
            "::",
            stringify!(mmap)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<io_methods>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).munmap) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(io_methods),
            "::",
            stringify!(munmap)
        )
    );
}
extern "C" {
    #[doc = " @brief Get the default IO methods"]
    #[doc = ""]
    #[doc = " @return the default io_methods instance, currently posix_io_methods"]
    pub fn get_default_io_methods() -> *mut io_methods;
}
extern "C" {
    #[doc = " @brief Raw open function"]
    #[doc = ""]
    #[doc = " @param methods The IO methods to use for this file."]
    #[doc = " @param path The file path to open."]
    #[doc = " @param mode The open mode."]
    #[doc = " @return A file reference. Will be freed when closing."]
    pub fn raw_open(
        methods: *mut io_methods,
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> IOFileRef;
}
extern "C" {
    pub fn raw_close(f: IOFileRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raw_seek(
        f: IOFileRef,
        offset: off_t,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raw_read(
        f: IOFileRef,
        buf: *mut ::std::os::raw::c_void,
        count: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raw_filesize(f: IOFileRef) -> off_t;
}
extern "C" {
    pub fn raw_mmap(f: IOFileRef, l: size_t, offset: off_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn raw_munmap(
        f: IOFileRef,
        addr: *mut ::std::os::raw::c_void,
        l: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raw_get_error(f: IOFileRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raw_get_path(f: IOFileRef) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Count the number of tags in the ifd"]
    pub fn or_ifd_count_tags(ifd: ORIfdDirRef) -> i32;
}
extern "C" {
    pub fn or_ifd_get_makernote_id(ifd: ORIfdDirRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn or_ifd_get_tag_name(ifd: ORIfdDirRef, tag: u32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn or_ifd_get_type(ifd: ORIfdDirRef) -> or_ifd_dir_type;
}
extern "C" {
    pub fn or_ifd_release(ifd: ORIfdDirRef);
}
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<div_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<div_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<ldiv_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<ldiv_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<lldiv_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<lldiv_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Extract thumbnail for raw file"]
    #[doc = ""]
    #[doc = " See %or_rawfile_get_thumbnail() for details."]
    #[doc = " Will return %OR_ERROR_CANT_OPEN if the file can't be open."]
    #[doc = ""]
    #[doc = " @param filename The path to the file to extract from."]
    #[doc = " @param preferred_size Preferred thumbnail size."]
    #[doc = " @param [in/out] thumb The thumbnail object ref to store it in"]
    #[doc = " If the ref is NULL, then a new one is allocated. It is"]
    #[doc = " the responsibility of the caller to release it."]
    #[doc = " @return An error code."]
    pub fn or_get_extract_thumbnail(
        filename: *const ::std::os::raw::c_char,
        preferred_size: u32,
        thumb: *mut ORThumbnailRef,
    ) -> or_error;
}
extern "C" {
    #[doc = " @brief Allocate a Thumbnail object."]
    #[doc = ""]
    #[doc = " @return A Thumbnail object. Use %or_thumbnail_release() to free it."]
    pub fn or_thumbnail_new() -> ORThumbnailRef;
}
extern "C" {
    #[doc = " @brief Release a Thumbnail object."]
    #[doc = ""]
    #[doc = " @param thumb The Thumbnail objet to release."]
    #[doc = " @return An error code. %OR_ERROR_NONE in case of success, and %OR_ERROR_NOTAREF"]
    #[doc = " if a NULL pointer is passed."]
    pub fn or_thumbnail_release(thumb: ORThumbnailRef) -> or_error;
}
extern "C" {
    #[doc = " @brief Get the thumbnail format."]
    #[doc = ""]
    #[doc = " @return A data type indicating the format."]
    pub fn or_thumbnail_format(thumb: ORThumbnailRef) -> or_data_type;
}
extern "C" {
    #[doc = " @brief Get the pointer to the data."]
    #[doc = ""]
    #[doc = " See %or_thumbnail_data_size() to know the size."]
    #[doc = ""]
    #[doc = " @return A pointer, owned by the %Thumbnail object. May be NULL."]
    pub fn or_thumbnail_data(thumb: ORThumbnailRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " @brief Get the data size."]
    #[doc = ""]
    #[doc = " @return The data size."]
    pub fn or_thumbnail_data_size(thumb: ORThumbnailRef) -> size_t;
}
extern "C" {
    #[doc = " @brief Get the %Thumbnail dimensions in pixels."]
    #[doc = ""]
    #[doc = " @param [out] x The horizontal dimension. Can be NULL."]
    #[doc = " @param [out] y The vertical dimension. Can be NULL."]
    pub fn or_thumbnail_dimensions(thumb: ORThumbnailRef, x: *mut u32, y: *mut u32);
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MosaicInfo {
    _unused: [u8; 0],
}
#[doc = " @brief A MosaicInfo object"]
pub type ORMosaicInfoRef = *const _MosaicInfo;
extern "C" {
    #[doc = " @brief Set the size of the mosaic"]
    pub fn or_mosaicinfo_set_size(pattern: ORMosaicInfoRef, x: u16, y: u16);
}
extern "C" {
    #[doc = " @brief Get the size of the mosaic"]
    pub fn or_mosaicinfo_get_size(pattern: ORMosaicInfoRef, x: *mut u16, y: *mut u16);
}
extern "C" {
    #[doc = " @brief Get the type of the mosaic"]
    pub fn or_mosaicinfo_get_type(arg1: ORMosaicInfoRef) -> or_cfa_pattern;
}
extern "C" {
    #[doc = " @brief Get the pattern."]
    #[doc = ""]
    #[doc = " This will return an array of %or_cfa_pattern_colour indicating the individual colours"]
    #[doc = " of the mosaic colour filter array."]
    #[doc = ""]
    #[doc = " @param pattern The %MosaicInfo"]
    #[doc = " @param [out] count the size of the array returned."]
    #[doc = " @return The pattern. The pointer is owned by the %MosaicInfo object."]
    pub fn or_mosaicinfo_get_pattern(pattern: ORMosaicInfoRef, count: *mut u16) -> *const u8;
}
extern "C" {
    #[doc = " @brief Extract the RAW data from the raw file."]
    #[doc = " @param filename the raw file name"]
    #[doc = " @param options the options to pass"]
    #[doc = " @param rawdata the destination RawData. Must allocated."]
    pub fn or_get_extract_rawdata(
        filename: *const ::std::os::raw::c_char,
        options: u32,
        rawdata: *mut ORRawDataRef,
    ) -> or_error;
}
extern "C" {
    #[doc = " @brief Allocate a new RawData"]
    #[doc = " @return A newly allocated RawData. Must be released by %or_rawdata_release"]
    pub fn or_rawdata_new() -> ORRawDataRef;
}
extern "C" {
    #[doc = " @brief Release the rawdata"]
    pub fn or_rawdata_release(rawdata: ORRawDataRef) -> or_error;
}
extern "C" {
    #[doc = " @brief Get the format of the RAW data"]
    pub fn or_rawdata_format(rawdata: ORRawDataRef) -> or_data_type;
}
extern "C" {
    #[doc = " @brief Get a pointer to the RAW data"]
    #[doc = ""]
    #[doc = " The pointer is owned by the RawData object."]
    pub fn or_rawdata_data(rawdata: ORRawDataRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " @brief Get the size of the RAW data in bytes"]
    pub fn or_rawdata_data_size(rawdata: ORRawDataRef) -> size_t;
}
extern "C" {
    #[doc = " @brief Get the RAW data dimensions in pixels"]
    #[doc = " @param [out] x the horizontal dimension"]
    #[doc = " @param [out] y the vertical dimension"]
    pub fn or_rawdata_dimensions(rawdata: ORRawDataRef, x: *mut u32, y: *mut u32);
}
extern "C" {
    #[doc = " @brief Get the active area for the raw data."]
    #[doc = ""]
    #[doc = " The active area is the usefull part of the RAW data"]
    #[doc = " it is specific per camera and isn't the crop."]
    #[doc = ""]
    #[doc = " @param rawdata the RawData object"]
    #[doc = " @param [out] x the X origin"]
    #[doc = " @param [out] y the Y origin"]
    #[doc = " @param [out] width the width"]
    #[doc = " @param [out] height the height."]
    #[doc = " @return an error code or %OR_ERROR_NONE in case of success."]
    pub fn or_rawdata_get_active_area(
        rawdata: ORRawDataRef,
        x: *mut u32,
        y: *mut u32,
        width: *mut u32,
        height: *mut u32,
    ) -> or_error;
}
extern "C" {
    #[doc = " @brief Return the bits per component"]
    #[doc = ""]
    #[doc = " @return the number of bits per component in the RAW data."]
    pub fn or_rawdata_bpc(rawdata: ORRawDataRef) -> u32;
}
extern "C" {
    #[doc = " @brief Return the bayer type for the raw data."]
    #[doc = ""]
    #[doc = " @return one of the constant defined in %or_cfa_pattern"]
    pub fn or_rawdata_get_cfa_pattern_type(rawdata: ORRawDataRef) -> or_cfa_pattern;
}
extern "C" {
    #[doc = " @brief Return the mosaic info"]
    #[doc = ""]
    #[doc = " @return a MosaicInfo object. It is owned by the RawData. Can't be NULL."]
    pub fn or_rawdata_get_mosaicinfo(rawdata: ORRawDataRef) -> ORMosaicInfoRef;
}
extern "C" {
    #[doc = " @brief Return the compression type for the RawData."]
    #[doc = ""]
    #[doc = " @return the numerical value."]
    pub fn or_rawdata_get_compression(rawdata: ORRawDataRef) -> u32;
}
extern "C" {
    #[doc = " @brief Return the levels values for the raw data."]
    #[doc = ""]
    #[doc = " These are possible values, not actual values."]
    #[doc = ""]
    #[doc = " @param rawdata the raw data object"]
    #[doc = " @param [out] black the pointer to the black value."]
    #[doc = " @param [out] white the pointer to the white value."]
    #[doc = " @return the error code."]
    pub fn or_rawdata_get_levels(
        rawdata: ORRawDataRef,
        black: *mut u16,
        white: *mut u16,
    ) -> or_error;
}
extern "C" {
    #[doc = " @brief Get the colour matrix."]
    #[doc = " @param rawdata the raw data object"]
    #[doc = " @param index the matrix index."]
    #[doc = " @param [out] size of %matrix. Returns the actual size."]
    #[doc = " @return the matrix. Pointer is owned by the RawData."]
    pub fn or_rawdata_get_colour_matrix(
        rawdata: ORRawDataRef,
        index: u32,
        size: *mut u32,
    ) -> *const f64;
}
extern "C" {
    #[doc = " @brief Get the rendered image from the raw data"]
    #[doc = " @param rawdata the raw data."]
    #[doc = " @param bitmapdata the preallocated bitmap data."]
    #[doc = " @param options option for rendering. Pass 0 for now."]
    #[doc = " @return an error code, %OR_ERROR_NONE in case of success."]
    pub fn or_rawdata_get_rendered_image(
        rawdata: ORRawDataRef,
        bitmapdata: ORBitmapDataRef,
        options: u32,
    ) -> or_error;
}
extern "C" {
    pub fn or_bitmapdata_new() -> ORBitmapDataRef;
}
extern "C" {
    pub fn or_bitmapdata_release(bitmapdata: ORBitmapDataRef) -> or_error;
}
extern "C" {
    pub fn or_bitmapdata_format(bitmapdata: ORBitmapDataRef) -> or_data_type;
}
extern "C" {
    pub fn or_bitmapdata_data(bitmapdata: ORBitmapDataRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn or_bitmapdata_data_size(bitmapdata: ORBitmapDataRef) -> size_t;
}
extern "C" {
    pub fn or_bitmapdata_dimensions(bitmapdata: ORBitmapDataRef, x: *mut u32, y: *mut u32);
}
extern "C" {
    pub fn or_bitmapdata_bpc(bitmapdata: ORBitmapDataRef) -> u32;
}
pub const ExifTag_EXIF_TAG_INTEROPERABILITY_INDEX: ExifTag = 1;
pub const ExifTag_EXIF_TAG_INTEROPERABILITY_VERSION: ExifTag = 2;
pub const ExifTag_EXIF_TAG_NEW_SUBFILE_TYPE: ExifTag = 254;
pub const ExifTag_EXIF_TAG_IMAGE_WIDTH: ExifTag = 256;
pub const ExifTag_EXIF_TAG_IMAGE_LENGTH: ExifTag = 257;
pub const ExifTag_EXIF_TAG_BITS_PER_SAMPLE: ExifTag = 258;
pub const ExifTag_EXIF_TAG_COMPRESSION: ExifTag = 259;
pub const ExifTag_EXIF_TAG_PHOTOMETRIC_INTERPRETATION: ExifTag = 262;
pub const ExifTag_EXIF_TAG_FILL_ORDER: ExifTag = 266;
pub const ExifTag_EXIF_TAG_DOCUMENT_NAME: ExifTag = 269;
pub const ExifTag_EXIF_TAG_IMAGE_DESCRIPTION: ExifTag = 270;
pub const ExifTag_EXIF_TAG_MAKE: ExifTag = 271;
pub const ExifTag_EXIF_TAG_MODEL: ExifTag = 272;
pub const ExifTag_EXIF_TAG_STRIP_OFFSETS: ExifTag = 273;
pub const ExifTag_EXIF_TAG_ORIENTATION: ExifTag = 274;
pub const ExifTag_EXIF_TAG_SAMPLES_PER_PIXEL: ExifTag = 277;
pub const ExifTag_EXIF_TAG_ROWS_PER_STRIP: ExifTag = 278;
pub const ExifTag_EXIF_TAG_STRIP_BYTE_COUNTS: ExifTag = 279;
pub const ExifTag_EXIF_TAG_X_RESOLUTION: ExifTag = 282;
pub const ExifTag_EXIF_TAG_Y_RESOLUTION: ExifTag = 283;
pub const ExifTag_EXIF_TAG_PLANAR_CONFIGURATION: ExifTag = 284;
pub const ExifTag_EXIF_TAG_RESOLUTION_UNIT: ExifTag = 296;
pub const ExifTag_EXIF_TAG_TRANSFER_FUNCTION: ExifTag = 301;
pub const ExifTag_EXIF_TAG_SOFTWARE: ExifTag = 305;
pub const ExifTag_EXIF_TAG_DATE_TIME: ExifTag = 306;
pub const ExifTag_EXIF_TAG_ARTIST: ExifTag = 315;
pub const ExifTag_EXIF_TAG_WHITE_POINT: ExifTag = 318;
pub const ExifTag_EXIF_TAG_PRIMARY_CHROMATICITIES: ExifTag = 319;
pub const ExifTag_TIFF_TAG_TILE_WIDTH: ExifTag = 322;
pub const ExifTag_TIFF_TAG_TILE_LENGTH: ExifTag = 323;
pub const ExifTag_TIFF_TAG_TILE_OFFSETS: ExifTag = 324;
pub const ExifTag_TIFF_TAG_TILE_BYTECOUNTS: ExifTag = 325;
pub const ExifTag_EXIF_TAG_TRANSFER_RANGE: ExifTag = 342;
pub const ExifTag_EXIF_TAG_SUB_IFDS: ExifTag = 330;
pub const ExifTag_EXIF_TAG_JPEG_PROC: ExifTag = 512;
pub const ExifTag_EXIF_TAG_JPEG_INTERCHANGE_FORMAT: ExifTag = 513;
pub const ExifTag_EXIF_TAG_JPEG_INTERCHANGE_FORMAT_LENGTH: ExifTag = 514;
pub const ExifTag_EXIF_TAG_YCBCR_COEFFICIENTS: ExifTag = 529;
pub const ExifTag_EXIF_TAG_YCBCR_SUB_SAMPLING: ExifTag = 530;
pub const ExifTag_EXIF_TAG_YCBCR_POSITIONING: ExifTag = 531;
pub const ExifTag_EXIF_TAG_REFERENCE_BLACK_WHITE: ExifTag = 532;
pub const ExifTag_EXIF_TAG_XML_PACKET: ExifTag = 700;
pub const ExifTag_EXIF_TAG_RELATED_IMAGE_FILE_FORMAT: ExifTag = 4096;
pub const ExifTag_EXIF_TAG_RELATED_IMAGE_WIDTH: ExifTag = 4097;
pub const ExifTag_EXIF_TAG_RELATED_IMAGE_LENGTH: ExifTag = 4098;
pub const ExifTag_EXIF_TAG_CFA_REPEAT_PATTERN_DIM: ExifTag = 33421;
pub const ExifTag_EXIF_TAG_CFA_PATTERN: ExifTag = 33422;
pub const ExifTag_EXIF_TAG_BATTERY_LEVEL: ExifTag = 33423;
pub const ExifTag_EXIF_TAG_COPYRIGHT: ExifTag = 33432;
pub const ExifTag_EXIF_TAG_EXPOSURE_TIME: ExifTag = 33434;
pub const ExifTag_EXIF_TAG_FNUMBER: ExifTag = 33437;
pub const ExifTag_EXIF_TAG_IPTC_NAA: ExifTag = 33723;
pub const ExifTag_EXIF_TAG_IMAGE_RESOURCES: ExifTag = 34377;
pub const ExifTag_EXIF_TAG_EXIF_IFD_POINTER: ExifTag = 34665;
pub const ExifTag_EXIF_TAG_INTER_COLOR_PROFILE: ExifTag = 34675;
pub const ExifTag_EXIF_TAG_EXPOSURE_PROGRAM: ExifTag = 34850;
pub const ExifTag_EXIF_TAG_SPECTRAL_SENSITIVITY: ExifTag = 34852;
pub const ExifTag_EXIF_TAG_GPS_INFO_IFD_POINTER: ExifTag = 34853;
pub const ExifTag_EXIF_TAG_ISO_SPEED_RATINGS: ExifTag = 34855;
pub const ExifTag_EXIF_TAG_OECF: ExifTag = 34856;
pub const ExifTag_EXIF_TAG_EXIF_VERSION: ExifTag = 36864;
pub const ExifTag_EXIF_TAG_DATE_TIME_ORIGINAL: ExifTag = 36867;
pub const ExifTag_EXIF_TAG_DATE_TIME_DIGITIZED: ExifTag = 36868;
pub const ExifTag_EXIF_TAG_COMPONENTS_CONFIGURATION: ExifTag = 37121;
pub const ExifTag_EXIF_TAG_COMPRESSED_BITS_PER_PIXEL: ExifTag = 37122;
pub const ExifTag_EXIF_TAG_SHUTTER_SPEED_VALUE: ExifTag = 37377;
pub const ExifTag_EXIF_TAG_APERTURE_VALUE: ExifTag = 37378;
pub const ExifTag_EXIF_TAG_BRIGHTNESS_VALUE: ExifTag = 37379;
pub const ExifTag_EXIF_TAG_EXPOSURE_BIAS_VALUE: ExifTag = 37380;
pub const ExifTag_EXIF_TAG_MAX_APERTURE_VALUE: ExifTag = 37381;
pub const ExifTag_EXIF_TAG_SUBJECT_DISTANCE: ExifTag = 37382;
pub const ExifTag_EXIF_TAG_METERING_MODE: ExifTag = 37383;
pub const ExifTag_EXIF_TAG_LIGHT_SOURCE: ExifTag = 37384;
pub const ExifTag_EXIF_TAG_FLASH: ExifTag = 37385;
pub const ExifTag_EXIF_TAG_FOCAL_LENGTH: ExifTag = 37386;
pub const ExifTag_EXIF_TAG_SUBJECT_AREA: ExifTag = 37396;
pub const ExifTag_EXIF_TAG_TIFF_EP_STANDARD_ID: ExifTag = 37398;
pub const ExifTag_EXIF_TAG_MAKER_NOTE: ExifTag = 37500;
pub const ExifTag_EXIF_TAG_USER_COMMENT: ExifTag = 37510;
pub const ExifTag_EXIF_TAG_SUB_SEC_TIME: ExifTag = 37520;
pub const ExifTag_EXIF_TAG_SUB_SEC_TIME_ORIGINAL: ExifTag = 37521;
pub const ExifTag_EXIF_TAG_SUB_SEC_TIME_DIGITIZED: ExifTag = 37522;
pub const ExifTag_EXIF_TAG_FLASH_PIX_VERSION: ExifTag = 40960;
pub const ExifTag_EXIF_TAG_COLOR_SPACE: ExifTag = 40961;
pub const ExifTag_EXIF_TAG_PIXEL_X_DIMENSION: ExifTag = 40962;
pub const ExifTag_EXIF_TAG_PIXEL_Y_DIMENSION: ExifTag = 40963;
pub const ExifTag_EXIF_TAG_RELATED_SOUND_FILE: ExifTag = 40964;
pub const ExifTag_EXIF_TAG_INTEROPERABILITY_IFD_POINTER: ExifTag = 40965;
pub const ExifTag_EXIF_TAG_FLASH_ENERGY: ExifTag = 41483;
pub const ExifTag_EXIF_TAG_SPATIAL_FREQUENCY_RESPONSE: ExifTag = 41484;
pub const ExifTag_EXIF_TAG_FOCAL_PLANE_X_RESOLUTION: ExifTag = 41486;
pub const ExifTag_EXIF_TAG_FOCAL_PLANE_Y_RESOLUTION: ExifTag = 41487;
pub const ExifTag_EXIF_TAG_FOCAL_PLANE_RESOLUTION_UNIT: ExifTag = 41488;
pub const ExifTag_EXIF_TAG_SUBJECT_LOCATION: ExifTag = 41492;
pub const ExifTag_EXIF_TAG_EXPOSURE_INDEX: ExifTag = 41493;
pub const ExifTag_EXIF_TAG_SENSING_METHOD: ExifTag = 41495;
pub const ExifTag_EXIF_TAG_FILE_SOURCE: ExifTag = 41728;
pub const ExifTag_EXIF_TAG_SCENE_TYPE: ExifTag = 41729;
pub const ExifTag_EXIF_TAG_NEW_CFA_PATTERN: ExifTag = 41730;
pub const ExifTag_EXIF_TAG_CUSTOM_RENDERED: ExifTag = 41985;
pub const ExifTag_EXIF_TAG_EXPOSURE_MODE: ExifTag = 41986;
pub const ExifTag_EXIF_TAG_WHITE_BALANCE: ExifTag = 41987;
pub const ExifTag_EXIF_TAG_DIGITAL_ZOOM_RATIO: ExifTag = 41988;
pub const ExifTag_EXIF_TAG_FOCAL_LENGTH_IN_35MM_FILM: ExifTag = 41989;
pub const ExifTag_EXIF_TAG_SCENE_CAPTURE_TYPE: ExifTag = 41990;
pub const ExifTag_EXIF_TAG_GAIN_CONTROL: ExifTag = 41991;
pub const ExifTag_EXIF_TAG_CONTRAST: ExifTag = 41992;
pub const ExifTag_EXIF_TAG_SATURATION: ExifTag = 41993;
pub const ExifTag_EXIF_TAG_SHARPNESS: ExifTag = 41994;
pub const ExifTag_EXIF_TAG_DEVICE_SETTING_DESCRIPTION: ExifTag = 41995;
pub const ExifTag_EXIF_TAG_SUBJECT_DISTANCE_RANGE: ExifTag = 41996;
pub const ExifTag_EXIF_TAG_IMAGE_UNIQUE_ID: ExifTag = 42016;
pub const ExifTag_EXIF_TAG_CAMERA_OWNER_NAME: ExifTag = 42032;
pub const ExifTag_EXIF_TAG_BODY_SERIAL_NUMBER: ExifTag = 42033;
pub const ExifTag_EXIF_TAG_BODY_LENS_MAKE: ExifTag = 42035;
pub const ExifTag_EXIF_TAG_BODY_LENS_MODEL: ExifTag = 42036;
pub const ExifTag_EXIF_TAG_GAMMA: ExifTag = 42240;
pub const ExifTag_EXIF_TAG_UNKNOWN_C4A5: ExifTag = 50341;
pub const ExifTag_TIFF_TAG_DNG_VERSION: ExifTag = 50706;
pub const ExifTag_DNG_TAG_UNIQUE_CAMERA_MODEL: ExifTag = 50708;
pub const ExifTag_DNG_TAG_DEFAULT_CROP_ORIGIN: ExifTag = 50719;
pub const ExifTag_DNG_TAG_DEFAULT_CROP_SIZE: ExifTag = 50720;
pub const ExifTag_DNG_TAG_COLORMATRIX1: ExifTag = 50721;
pub const ExifTag_DNG_TAG_COLORMATRIX2: ExifTag = 50722;
pub const ExifTag_DNG_TAG_CAMERA_CALIBRATION1: ExifTag = 50723;
pub const ExifTag_DNG_TAG_CAMERA_CALIBRATION2: ExifTag = 50724;
pub const ExifTag_DNG_TAG_REDUCTION_MATRIX1: ExifTag = 50725;
pub const ExifTag_DNG_TAG_REDUCTION_MATRIX2: ExifTag = 50726;
pub const ExifTag_DNG_TAG_ANALOG_BALANCE: ExifTag = 50727;
pub const ExifTag_DNG_TAG_AS_SHOT_NEUTRAL: ExifTag = 50728;
pub const ExifTag_DNG_TAG_AS_SHOT_WHITE_XY: ExifTag = 50729;
pub const ExifTag_DNG_TAG_CALIBRATION_ILLUMINANT1: ExifTag = 50778;
pub const ExifTag_DNG_TAG_CALIBRATION_ILLUMINANT2: ExifTag = 50779;
pub const ExifTag_DNG_TAG_ORIGINAL_RAW_FILE_NAME: ExifTag = 50827;
pub const ExifTag_DNG_TAG_ACTIVE_AREA: ExifTag = 50829;
pub const ExifTag_ERF_TAG_PREVIEW_IMAGE: ExifTag = 640;
pub const ExifTag_MNOTE_EPSON_SENSORAREA: ExifTag = 1024;
pub const ExifTag_ORF_TAG_THUMBNAIL_IMAGE: ExifTag = 256;
pub const ExifTag_ORF_TAG_CAMERA_SETTINGS: ExifTag = 8224;
pub const ExifTag_ORF_TAG_CS_PREVIEW_IMAGE_VALID: ExifTag = 256;
pub const ExifTag_ORF_TAG_CS_PREVIEW_IMAGE_START: ExifTag = 257;
pub const ExifTag_ORF_TAG_CS_PREVIEW_IMAGE_LENGTH: ExifTag = 258;
pub const ExifTag_CR2_TAG_c5d9: ExifTag = 50649;
#[doc = "< Exif tag for CR2 RAW \"slices\""]
pub const ExifTag_CR2_TAG_SLICE: ExifTag = 50752;
pub const ExifTag_CR2_TAG_SRAW_TYPE: ExifTag = 50885;
pub const ExifTag_CR2_TAG_c6d6: ExifTag = 50902;
pub const ExifTag_RW2_TAG_SENSOR_WIDTH: ExifTag = 2;
pub const ExifTag_RW2_TAG_SENSOR_HEIGHT: ExifTag = 3;
pub const ExifTag_RW2_TAG_SENSOR_TOPBORDER: ExifTag = 4;
pub const ExifTag_RW2_TAG_SENSOR_LEFTBORDER: ExifTag = 5;
pub const ExifTag_RW2_TAG_SENSOR_BOTTOMBORDER: ExifTag = 6;
pub const ExifTag_RW2_TAG_SENSOR_RIGHTBORDER: ExifTag = 7;
pub const ExifTag_RW2_TAG_IMAGE_CFAPATTERN: ExifTag = 9;
pub const ExifTag_RW2_TAG_IMAGE_BITSPERSAMPLE: ExifTag = 10;
pub const ExifTag_RW2_TAG_IMAGE_COMPRESSION: ExifTag = 11;
pub const ExifTag_RW2_TAG_IMAGE_RAWFORMAT: ExifTag = 45;
pub const ExifTag_RW2_TAG_JPEG_FROM_RAW: ExifTag = 46;
pub const ExifTag_RW2_TAG_STRIP_OFFSETS: ExifTag = 280;
pub const ExifTag_MNOTE_PENTAX_PREVIEW_IMAGE_SIZE: ExifTag = 2;
pub const ExifTag_MNOTE_PENTAX_PREVIEW_IMAGE_LENGTH: ExifTag = 3;
pub const ExifTag_MNOTE_PENTAX_PREVIEW_IMAGE_START: ExifTag = 4;
pub const ExifTag_MNOTE_PENTAX_MODEL_ID: ExifTag = 5;
pub const ExifTag_MNOTE_PENTAX_IMAGEAREAOFFSET: ExifTag = 56;
pub const ExifTag_MNOTE_PENTAX_RAWIMAGESIZE: ExifTag = 57;
pub const ExifTag_MNOTE_PENTAX_WHITELEVEL: ExifTag = 126;
pub const ExifTag_MNOTE_CANON_MODEL_ID: ExifTag = 16;
pub const ExifTag_MNOTE_CANON_RAW_DATA_OFFSET: ExifTag = 129;
pub const ExifTag_MNOTE_CANON_RAW_DATA_LENGTH: ExifTag = 130;
pub const ExifTag_MNOTE_CANON_SENSORINFO: ExifTag = 224;
pub const ExifTag_MNOTE_LEICA_PREVIEW_IMAGE: ExifTag = 768;
pub const ExifTag_MNOTE_NIKON_QUALITY: ExifTag = 4;
pub const ExifTag_MNOTE_NIKON_PREVIEW_IFD: ExifTag = 17;
pub const ExifTag_MNOTE_NIKON_NEFDECODETABLE2: ExifTag = 150;
pub const ExifTag_MNOTE_NIKON_PREVIEWIFD_START: ExifTag = 513;
pub const ExifTag_MNOTE_NIKON_PREVIEWIFD_LENGTH: ExifTag = 514;
pub const ExifTag_MNOTE_SONY_MODEL_ID: ExifTag = 45057;
pub const ExifTag__EXIF_TAG_LAST: ExifTag = 45058;
#[doc = " IFD Exif Tag"]
#[doc = " @note Taken from libexif"]
pub type ExifTag = ::std::os::raw::c_uint;
pub const ExifPhotometricInterpretation_EV_PI_BLACKISZERO: ExifPhotometricInterpretation = 1;
pub const ExifPhotometricInterpretation_EV_PI_RGB: ExifPhotometricInterpretation = 2;
pub const ExifPhotometricInterpretation_EV_PI_YCBCR: ExifPhotometricInterpretation = 6;
pub const ExifPhotometricInterpretation_EV_PI_CFA: ExifPhotometricInterpretation = 32803;
pub const ExifPhotometricInterpretation_EV_PI_LINEAR_RAW: ExifPhotometricInterpretation = 34892;
pub type ExifPhotometricInterpretation = ::std::os::raw::c_uint;
pub const ExifLightsourceValue_EV_LIGHTSOURCE_UNKNOWN: ExifLightsourceValue = 0;
pub const ExifLightsourceValue_EV_LIGHTSOURCE_DAYLIGHT: ExifLightsourceValue = 1;
pub const ExifLightsourceValue_EV_LIGHTSOURCE_FLUORESCENT: ExifLightsourceValue = 2;
pub const ExifLightsourceValue_EV_LIGHTSOURCE_TUNGSTEN: ExifLightsourceValue = 3;
pub const ExifLightsourceValue_EV_LIGHTSOURCE_STANDARD_A: ExifLightsourceValue = 17;
pub const ExifLightsourceValue_EV_LIGHTSOURCE_STANDARD_B: ExifLightsourceValue = 18;
pub const ExifLightsourceValue_EV_LIGHTSOURCE_STANDARD_C: ExifLightsourceValue = 19;
pub const ExifLightsourceValue_EV_LIGHTSOURCE_D55: ExifLightsourceValue = 20;
pub const ExifLightsourceValue_EV_LIGHTSOURCE_D65: ExifLightsourceValue = 21;
pub const ExifLightsourceValue_EV_LIGHTSOURCE_D75: ExifLightsourceValue = 22;
pub const ExifLightsourceValue_EV_LIGHTSOURCE_OTHER: ExifLightsourceValue = 255;
pub type ExifLightsourceValue = ::std::os::raw::c_uint;
pub const ExifTagType_EXIF_FORMAT_BYTE: ExifTagType = 1;
pub const ExifTagType_EXIF_FORMAT_ASCII: ExifTagType = 2;
pub const ExifTagType_EXIF_FORMAT_SHORT: ExifTagType = 3;
pub const ExifTagType_EXIF_FORMAT_LONG: ExifTagType = 4;
pub const ExifTagType_EXIF_FORMAT_RATIONAL: ExifTagType = 5;
pub const ExifTagType_EXIF_FORMAT_SBYTE: ExifTagType = 6;
pub const ExifTagType_EXIF_FORMAT_UNDEFINED: ExifTagType = 7;
pub const ExifTagType_EXIF_FORMAT_SSHORT: ExifTagType = 8;
pub const ExifTagType_EXIF_FORMAT_SLONG: ExifTagType = 9;
pub const ExifTagType_EXIF_FORMAT_SRATIONAL: ExifTagType = 10;
pub const ExifTagType_EXIF_FORMAT_FLOAT: ExifTagType = 11;
pub const ExifTagType_EXIF_FORMAT_DOUBLE: ExifTagType = 12;
pub const ExifTagType_EXIF_FORMAT_INVALID: ExifTagType = 13;
#[doc = " Type for Exif field/tag"]
#[doc = " @note taken from libexif"]
pub type ExifTagType = ::std::os::raw::c_uint;
#[doc = " @brief Unsigned rational as a fraction"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ORRational {
    #[doc = "< Numerator"]
    pub num: u32,
    #[doc = "< Denominator"]
    pub denom: u32,
}
#[test]
fn bindgen_test_layout_ORRational() {
    assert_eq!(
        ::std::mem::size_of::<ORRational>(),
        8usize,
        concat!("Size of: ", stringify!(ORRational))
    );
    assert_eq!(
        ::std::mem::align_of::<ORRational>(),
        4usize,
        concat!("Alignment of ", stringify!(ORRational))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<ORRational>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ORRational),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<ORRational>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).denom) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ORRational),
            "::",
            stringify!(denom)
        )
    );
}
#[doc = " @brief Signed rational as a fraction"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ORSRational {
    #[doc = "< Numerator (carry the sign)"]
    pub num: i32,
    #[doc = "< Denominator"]
    pub denom: u32,
}
#[test]
fn bindgen_test_layout_ORSRational() {
    assert_eq!(
        ::std::mem::size_of::<ORSRational>(),
        8usize,
        concat!("Size of: ", stringify!(ORSRational))
    );
    assert_eq!(
        ::std::mem::align_of::<ORSRational>(),
        4usize,
        concat!("Alignment of ", stringify!(ORSRational))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<ORSRational>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ORSRational),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<ORSRational>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).denom) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ORSRational),
            "::",
            stringify!(denom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MetadataIterator {
    _unused: [u8; 0],
}
pub type ORMetadataIteratorRef = *mut _MetadataIterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MetaValue {
    _unused: [u8; 0],
}
pub type ORMetaValueRef = *mut _MetaValue;
pub type ORConstMetaValueRef = *const _MetaValue;
#[doc = "< EXIF namespace"]
pub const META_NS_EXIF: _bindgen_ty_5 = 65536;
#[doc = "< TIFF namespace"]
pub const META_NS_TIFF: _bindgen_ty_5 = 131072;
#[doc = " The meta data namespaces, 16 MSB of the index"]
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " @brief Get the string out of the %MetaValue."]
    #[doc = ""]
    #[doc = " @param idx Pass 0. @todo Remove the idx parameter."]
    #[doc = " @return A NUL terminated string. NULL if not found. The pointer is owned by the"]
    #[doc = " %MetaValue."]
    pub fn or_metavalue_get_string(
        value: ORConstMetaValueRef,
        idx: u32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Convert the %MetaValue to a string."]
    #[doc = ""]
    #[doc = " @param full FALSE if the conversion should abridge the result."]
    #[doc = " @return A NUL terminated string. NULL if not found. The pointer is owned by the"]
    #[doc = " %MetaValue."]
    pub fn or_metavalue_get_as_string(
        value: ORConstMetaValueRef,
        full: bool,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Get the value count"]
    #[doc = ""]
    #[doc = " @return The value count."]
    pub fn or_metavalue_get_count(value: ORMetaValueRef) -> u32;
}
extern "C" {
    #[doc = " @brief Free the %MetaValue"]
    pub fn or_metavalue_release(value: ORMetaValueRef);
}
extern "C" {
    #[doc = " @brief Move to the next metadata value"]
    #[doc = " @param iterator The metadata iterator."]
    #[doc = " @return 0 if no more."]
    pub fn or_metadata_iterator_next(iterator: ORMetadataIteratorRef) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the metadata entry from the iterator."]
    #[doc = ""]
    #[doc = " @param iterator The iterator."]
    #[doc = " @param ifd Pointer to the IfdDirRef."]
    #[doc = " @param id Pointer to id (nullable)"]
    #[doc = " @param type Pointer to exif tag type (nullable)"]
    #[doc = " @param value Pointer to store a newly allocated ORConstMetaValue (nullable)"]
    #[doc = " @return 0 if error. In that case none of the values are valid."]
    pub fn or_metadata_iterator_get_entry(
        iterator: ORMetadataIteratorRef,
        ifd: *mut ORIfdDirRef,
        id: *mut u16,
        type_: *mut ExifTagType,
        value: *mut ORMetaValueRef,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Free the iterator"]
    #[doc = " @param iterator The iterator to free."]
    pub fn or_metadata_iterator_free(iterator: ORMetadataIteratorRef);
}
extern "C" {
    #[doc = " @brief Return a NULL terminated list of extensions that the library supposedly handle."]
    #[doc = ""]
    #[doc = " @return A NULL terminated list. Owned the library."]
    pub fn or_get_file_extensions() -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Create a new %RawFile object from a file."]
    #[doc = " @param filename The path to the file to open."]
    #[doc = " @param type The hint for the file type. Pass %OR_RAWFILE_TYPE_UNKNOWN to let the library"]
    #[doc = " guess."]
    #[doc = " @return A new allocated RawFile pointer. Must be freed with %or_rawfile_release()."]
    pub fn or_rawfile_new(
        filename: *const ::std::os::raw::c_char,
        type_: or_rawfile_type,
    ) -> ORRawFileRef;
}
extern "C" {
    #[doc = " @brief Create a new %RawFile object from a memory buffer."]
    #[doc = " @param buffer The memory buffer: bytes from the RAW file."]
    #[doc = " @param len The length of the memory buffer in bytes."]
    #[doc = " @param type The hint for the file type. Pass %OR_RAWFILE_TYPE_UNKNOWN to let the library"]
    #[doc = " guess."]
    #[doc = " @return A new allocated RawFile pointer. Must be freed with %or_rawfile_release()."]
    pub fn or_rawfile_new_from_memory(
        buffer: *const u8,
        len: u32,
        type_: or_rawfile_type,
    ) -> ORRawFileRef;
}
extern "C" {
    #[doc = " @brief Release the %RawFile."]
    #[doc = " @param [in] rawfile The %RawFile object to release."]
    #[doc = " @return An error code. %OR_ERROR_NOT_AREF if the pointer is NULL."]
    pub fn or_rawfile_release(rawfile: ORRawFileRef) -> or_error;
}
extern "C" {
    #[doc = " @brief Get the %RawFile type"]
    #[doc = ""]
    #[doc = " @return The type from %or_rawfile_type. It isn't necessarily what was passed"]
    #[doc = " at creation time."]
    pub fn or_rawfile_get_type(rawfile: ORRawFileRef) -> or_rawfile_type;
}
extern "C" {
    #[doc = " @brief Return the type id to identify the exact file type."]
    #[doc = ""]
    #[doc = " @return The type ID. It is a combination of vendor ID and camera ID."]
    #[doc = ""]
    #[doc = " @see %or_rawfile_typeid."]
    pub fn or_rawfile_get_typeid(rawfile: ORRawFileRef) -> or_rawfile_typeid;
}
extern "C" {
    #[doc = " @brief Return the type id to identify the vendor."]
    #[doc = ""]
    #[doc = " @return The vendor ID. Use the constants values to match."]
    pub fn or_rawfile_get_vendorid(rawfile: ORRawFileRef) -> or_rawfile_typeid;
}
extern "C" {
    #[doc = " @brief Get the the array of thumbnail sizes."]
    #[doc = ""]
    #[doc = " @param rawfile The RawFile."]
    #[doc = " @param [out] size The size of the array is returned"]
    #[doc = " @return The array. It is owned by the raw file"]
    pub fn or_rawfile_get_thumbnail_sizes(rawfile: ORRawFileRef, size: *mut size_t) -> *const u32;
}
extern "C" {
    #[doc = " @brief Get a thumbnail from a RawFile.."]
    #[doc = ""]
    #[doc = " Get a thumbnail close to the preferred size. If there is no exact match, it"]
    #[doc = " will prefer a bigger thumbnail so that you can downsize it."]
    #[doc = ""]
    #[doc = " Return an error in case or error. %OR_ERROR_NOT_FOUND if no thumbnail can be"]
    #[doc = " found."]
    #[doc = ""]
    #[doc = " @param rawfile The RawFile object."]
    #[doc = " @param preferred_size The requested preferred size."]
    #[doc = " @param [in/out] thumb The Thumbnail object to store the data."]
    #[doc = " @return An error code. %OR_ERROR_NONE in case of success."]
    pub fn or_rawfile_get_thumbnail(
        rawfile: ORRawFileRef,
        preferred_size: u32,
        thumb: ORThumbnailRef,
    ) -> or_error;
}
extern "C" {
    #[doc = " @brief Get the RawData out of the RawFile."]
    #[doc = ""]
    #[doc = " Will return an error code: %OR_ERROR_NOT_FOUND if the RAW data can't be"]
    #[doc = " located. This likely indicate a file that isn't properly supported."]
    #[doc = ""]
    #[doc = " The RawData object will contain the uncompress RAW data if possible (unless"]
    #[doc = " otherwise requested)."]
    #[doc = ""]
    #[doc = " @param rawfile The RawFile."]
    #[doc = " @param [in/out] rawdata An allocated RawData object. Pass %OR_OPTIONS_DONT_DECOMPRESS if"]
    #[doc = " you don't want the RAW data stream to be decompressed, %OR_OPTIONS_NONE otherwise."]
    #[doc = " @param options Some options."]
    #[doc = " @return An error code or %OR_ERROR_NONE on success."]
    pub fn or_rawfile_get_rawdata(
        rawfile: ORRawFileRef,
        rawdata: ORRawDataRef,
        options: u32,
    ) -> or_error;
}
extern "C" {
    #[doc = " @brief Get the rendered image from the raw file"]
    #[doc = " @param rawfile The raw file."]
    #[doc = " @param rawdata The preallocated bitmap data."]
    #[doc = " @param options Option for rendering. Pass %OR_OPTIONS_NONE for now."]
    #[doc = " @return An error code. %OR_ERROR_NOTAREF is %rawfile is NULL."]
    pub fn or_rawfile_get_rendered_image(
        rawfile: ORRawFileRef,
        rawdata: ORBitmapDataRef,
        options: u32,
    ) -> or_error;
}
extern "C" {
    #[doc = " @brief Get the orientation."]
    #[doc = ""]
    #[doc = " This is a convenince method, equivalent to getting the value of"]
    #[doc = " %EXIF_TAG_ORIENTATION."]
    #[doc = ""]
    #[doc = " @param rawfile The RawFile object."]
    #[doc = " @return the orientation using EXIF semantics. If there is no orientation"]
    #[doc = " attribute, return 0."]
    pub fn or_rawfile_get_orientation(rawfile: ORRawFileRef) -> i32;
}
extern "C" {
    #[doc = " @brief Get the first colour matrix."]
    #[doc = ""]
    #[doc = "  The error code will be one of the following: %OR_ERROR_BUF_TOO_SMALL if"]
    #[doc = "  %matrix is too small. Check the value of %size to know how much you need."]
    #[doc = "  %OR_ERROR_NOT_IMPLEMENTED if there is no matrix in the file nor built-in"]
    #[doc = "  matrices."]
    #[doc = ""]
    #[doc = "  Call %or_rawfile_get_colour_matrix_origin() if you want to know if it is a built-in"]
    #[doc = "  matrix."]
    #[doc = ""]
    #[doc = "  @see %or_rawfile_get_colour_matrix_origin()"]
    #[doc = ""]
    #[doc = "  @param rawfile The RAW file object"]
    #[doc = "  @param [int] matrix The storage array for the matrix"]
    #[doc = "  @param [in/out] size The size of the %matrix array. On output the actual size of the matrix."]
    #[doc = "  @return An error codex."]
    pub fn or_rawfile_get_colourmatrix1(
        rawfile: ORRawFileRef,
        matrix: *mut f64,
        size: *mut u32,
    ) -> or_error;
}
extern "C" {
    #[doc = " @brief Get the second colour matrix."]
    #[doc = ""]
    #[doc = " See %or_rawfile_get_colourmatrix1 for details. Will return %OR_ERROR_INVALID_PARAM if the"]
    #[doc = " matrix doesn't exist in the file. There won't be a built-in matrix."]
    #[doc = ""]
    #[doc = " @see %or_rawfile_get_colourmatrix1()"]
    pub fn or_rawfile_get_colourmatrix2(
        rawfile: ORRawFileRef,
        matrix: *mut f64,
        size: *mut u32,
    ) -> or_error;
}
extern "C" {
    #[doc = " @brief Get calibration illuminant for the first colour matrix."]
    #[doc = ""]
    #[doc = " @return The Exif value. See %ExifLightsourceValue. %EV_LIGHTSOURCE_UNKNOWN means the"]
    #[doc = " matrix is not found."]
    #[doc = ""]
    #[doc = " @see %ExifLightsourceValue."]
    pub fn or_rawfile_get_calibration_illuminant1(rawfile: ORRawFileRef) -> ExifLightsourceValue;
}
extern "C" {
    #[doc = " @brief Get calibration illuminant for the second colour matrix."]
    #[doc = ""]
    #[doc = " @see %or_rawfile_get_calibration_illuminant1"]
    pub fn or_rawfile_get_calibration_illuminant2(rawfile: ORRawFileRef) -> ExifLightsourceValue;
}
extern "C" {
    #[doc = " @brief Get the colour matrix origin for file."]
    #[doc = ""]
    #[doc = "  This allow to determine if it is provided by the file or as a hardcoded"]
    #[doc = "  value in the library."]
    #[doc = ""]
    #[doc = "  @param rawfile The RawFile object"]
    #[doc = "  @return The colour matrix origin"]
    pub fn or_rawfile_get_colour_matrix_origin(rawfile: ORRawFileRef) -> or_colour_matrix_origin;
}
extern "C" {
    #[doc = " @brief Get the metadata value"]
    #[doc = " @param rawfile the RawFile object."]
    #[doc = " @param meta_index the index value which a bit OR between a namespace and an index"]
    #[doc = " @return a const MetaValue, owned by the %RawFile"]
    pub fn or_rawfile_get_metavalue(rawfile: ORRawFileRef, meta_index: i32) -> ORConstMetaValueRef;
}
extern "C" {
    #[doc = " @brief Get an IFD directory"]
    #[doc = ""]
    #[doc = " @param rawfile The %RawFile object."]
    #[doc = " @param ifd The IFD you want, from %or_ifd_dir_type."]
    #[doc = " @return An IfdDir. Must be freed with %or_ifd_release()"]
    #[doc = ""]
    #[doc = " @see %or_ifd_dir_type"]
    pub fn or_rawfile_get_ifd(rawfile: ORRawFileRef, ifd: or_ifd_dir_type) -> ORIfdDirRef;
}
extern "C" {
    #[doc = " @brief Get a metadata iterator."]
    #[doc = ""]
    #[doc = " @param rawfile The RawFile object."]
    #[doc = " @return The metadata iterator. Must be freed with %or_metadata_iterator_free()"]
    pub fn or_rawfile_get_metadata_iterator(rawfile: ORRawFileRef) -> ORMetadataIteratorRef;
}
pub const _debug_level_ERROR: _debug_level = 0;
pub const _debug_level_WARNING: _debug_level = 1;
pub const _debug_level_NOTICE: _debug_level = 2;
pub const _debug_level_DEBUG1: _debug_level = 3;
pub const _debug_level_DEBUG2: _debug_level = 4;
#[doc = " @brief Debug levels."]
pub type _debug_level = ::std::os::raw::c_uint;
#[doc = " @brief Debug levels."]
pub use self::_debug_level as debug_level;
extern "C" {
    #[doc = " @brief Set the debug level."]
    pub fn or_debug_set_level(lvl: debug_level);
}
